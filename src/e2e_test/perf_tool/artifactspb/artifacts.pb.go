// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/e2e_test/perf_tool/artifactspb/artifacts.proto

package artifactspb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExperimentArtifacts struct {
	VizierArtifacts   *WorkloadArtifacts   `protobuf:"bytes,1,opt,name=vizier_artifacts,json=vizierArtifacts,proto3" json:"vizier_artifacts,omitempty"`
	WorkloadArtifacts []*WorkloadArtifacts `protobuf:"bytes,2,rep,name=workload_artifacts,json=workloadArtifacts,proto3" json:"workload_artifacts,omitempty"`
}

func (m *ExperimentArtifacts) Reset()      { *m = ExperimentArtifacts{} }
func (*ExperimentArtifacts) ProtoMessage() {}
func (*ExperimentArtifacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7eebf904a9bc2a6, []int{0}
}
func (m *ExperimentArtifacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExperimentArtifacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExperimentArtifacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExperimentArtifacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExperimentArtifacts.Merge(m, src)
}
func (m *ExperimentArtifacts) XXX_Size() int {
	return m.Size()
}
func (m *ExperimentArtifacts) XXX_DiscardUnknown() {
	xxx_messageInfo_ExperimentArtifacts.DiscardUnknown(m)
}

var xxx_messageInfo_ExperimentArtifacts proto.InternalMessageInfo

func (m *ExperimentArtifacts) GetVizierArtifacts() *WorkloadArtifacts {
	if m != nil {
		return m.VizierArtifacts
	}
	return nil
}

func (m *ExperimentArtifacts) GetWorkloadArtifacts() []*WorkloadArtifacts {
	if m != nil {
		return m.WorkloadArtifacts
	}
	return nil
}

type WorkloadArtifacts struct {
	ComponentArtifacts map[string]*WorkloadComponentArtifacts `protobuf:"bytes,1,rep,name=component_artifacts,json=componentArtifacts,proto3" json:"component_artifacts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *WorkloadArtifacts) Reset()      { *m = WorkloadArtifacts{} }
func (*WorkloadArtifacts) ProtoMessage() {}
func (*WorkloadArtifacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7eebf904a9bc2a6, []int{1}
}
func (m *WorkloadArtifacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkloadArtifacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkloadArtifacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkloadArtifacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadArtifacts.Merge(m, src)
}
func (m *WorkloadArtifacts) XXX_Size() int {
	return m.Size()
}
func (m *WorkloadArtifacts) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadArtifacts.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadArtifacts proto.InternalMessageInfo

func (m *WorkloadArtifacts) GetComponentArtifacts() map[string]*WorkloadComponentArtifacts {
	if m != nil {
		return m.ComponentArtifacts
	}
	return nil
}

type WorkloadComponentArtifacts struct {
}

func (m *WorkloadComponentArtifacts) Reset()      { *m = WorkloadComponentArtifacts{} }
func (*WorkloadComponentArtifacts) ProtoMessage() {}
func (*WorkloadComponentArtifacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7eebf904a9bc2a6, []int{2}
}
func (m *WorkloadComponentArtifacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkloadComponentArtifacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkloadComponentArtifacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkloadComponentArtifacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkloadComponentArtifacts.Merge(m, src)
}
func (m *WorkloadComponentArtifacts) XXX_Size() int {
	return m.Size()
}
func (m *WorkloadComponentArtifacts) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkloadComponentArtifacts.DiscardUnknown(m)
}

var xxx_messageInfo_WorkloadComponentArtifacts proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ExperimentArtifacts)(nil), "px.perf_tool.ExperimentArtifacts")
	proto.RegisterType((*WorkloadArtifacts)(nil), "px.perf_tool.WorkloadArtifacts")
	proto.RegisterMapType((map[string]*WorkloadComponentArtifacts)(nil), "px.perf_tool.WorkloadArtifacts.ComponentArtifactsEntry")
	proto.RegisterType((*WorkloadComponentArtifacts)(nil), "px.perf_tool.WorkloadComponentArtifacts")
}

func init() {
	proto.RegisterFile("src/e2e_test/perf_tool/artifactspb/artifacts.proto", fileDescriptor_b7eebf904a9bc2a6)
}

var fileDescriptor_b7eebf904a9bc2a6 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2a, 0x2e, 0x4a, 0xd6,
	0x4f, 0x35, 0x4a, 0x8d, 0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2f, 0x48, 0x2d, 0x4a, 0x8b, 0x2f, 0xc9,
	0xcf, 0xcf, 0xd1, 0x4f, 0x2c, 0x2a, 0xc9, 0x4c, 0x4b, 0x4c, 0x2e, 0x29, 0x2e, 0x48, 0x42, 0xb0,
	0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x78, 0x0a, 0x2a, 0xf4, 0xe0, 0x2a, 0xa5, 0x74, 0xd3,
	0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5, 0xc1,
	0x8a, 0x92, 0x4a, 0xd3, 0xc0, 0x3c, 0x30, 0x07, 0xcc, 0x82, 0x68, 0x56, 0xda, 0xc8, 0xc8, 0x25,
	0xec, 0x5a, 0x51, 0x90, 0x5a, 0x94, 0x99, 0x9b, 0x9a, 0x57, 0xe2, 0x08, 0x33, 0x5a, 0xc8, 0x8b,
	0x4b, 0xa0, 0x2c, 0xb3, 0x2a, 0x33, 0xb5, 0x28, 0x1e, 0x6e, 0x9d, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0xb7, 0x91, 0xbc, 0x1e, 0xb2, 0x7d, 0x7a, 0xe1, 0xf9, 0x45, 0xd9, 0x39, 0xf9, 0x89, 0x29, 0x70,
	0xad, 0x41, 0xfc, 0x10, 0x8d, 0x08, 0xb3, 0xfc, 0xb8, 0x84, 0xca, 0xa1, 0xaa, 0x90, 0x4c, 0x63,
	0x52, 0x60, 0x26, 0xc6, 0x34, 0xc1, 0x72, 0x74, 0x21, 0xa5, 0x77, 0x8c, 0x5c, 0x82, 0x18, 0x0a,
	0x85, 0x32, 0xb8, 0x84, 0x93, 0xf3, 0x73, 0x0b, 0xf2, 0xf3, 0x52, 0xf3, 0x4a, 0x50, 0x1c, 0x0d,
	0xb2, 0xc6, 0x9c, 0x80, 0x35, 0x7a, 0xce, 0x30, 0xad, 0x70, 0x21, 0xd7, 0xbc, 0x92, 0xa2, 0xca,
	0x20, 0xa1, 0x64, 0x0c, 0x09, 0xa9, 0x7c, 0x2e, 0x71, 0x1c, 0xca, 0x85, 0x04, 0xb8, 0x98, 0xb3,
	0x53, 0x2b, 0xc1, 0x21, 0xc5, 0x19, 0x04, 0x62, 0x0a, 0xd9, 0x71, 0xb1, 0x96, 0x25, 0xe6, 0x94,
	0xa6, 0x4a, 0x30, 0x81, 0x43, 0x4f, 0x03, 0xbb, 0x43, 0x30, 0xcd, 0x0b, 0x82, 0x68, 0xb3, 0x62,
	0xb2, 0x60, 0x54, 0x92, 0xe1, 0x92, 0xc2, 0xad, 0xd0, 0xc9, 0xf1, 0xc2, 0x43, 0x39, 0x86, 0x1b,
	0x0f, 0xe5, 0x18, 0x3e, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3,
	0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c,
	0xc3, 0x87, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1,
	0x1c, 0x43, 0x14, 0x37, 0x52, 0x92, 0x4a, 0x62, 0x03, 0x27, 0x06, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb3, 0xd4, 0x0f, 0x65, 0x7f, 0x02, 0x00, 0x00,
}

func (this *ExperimentArtifacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExperimentArtifacts)
	if !ok {
		that2, ok := that.(ExperimentArtifacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.VizierArtifacts.Equal(that1.VizierArtifacts) {
		return false
	}
	if len(this.WorkloadArtifacts) != len(that1.WorkloadArtifacts) {
		return false
	}
	for i := range this.WorkloadArtifacts {
		if !this.WorkloadArtifacts[i].Equal(that1.WorkloadArtifacts[i]) {
			return false
		}
	}
	return true
}
func (this *WorkloadArtifacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkloadArtifacts)
	if !ok {
		that2, ok := that.(WorkloadArtifacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ComponentArtifacts) != len(that1.ComponentArtifacts) {
		return false
	}
	for i := range this.ComponentArtifacts {
		if !this.ComponentArtifacts[i].Equal(that1.ComponentArtifacts[i]) {
			return false
		}
	}
	return true
}
func (this *WorkloadComponentArtifacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkloadComponentArtifacts)
	if !ok {
		that2, ok := that.(WorkloadComponentArtifacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ExperimentArtifacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&artifactspb.ExperimentArtifacts{")
	if this.VizierArtifacts != nil {
		s = append(s, "VizierArtifacts: "+fmt.Sprintf("%#v", this.VizierArtifacts)+",\n")
	}
	if this.WorkloadArtifacts != nil {
		s = append(s, "WorkloadArtifacts: "+fmt.Sprintf("%#v", this.WorkloadArtifacts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkloadArtifacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&artifactspb.WorkloadArtifacts{")
	keysForComponentArtifacts := make([]string, 0, len(this.ComponentArtifacts))
	for k, _ := range this.ComponentArtifacts {
		keysForComponentArtifacts = append(keysForComponentArtifacts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForComponentArtifacts)
	mapStringForComponentArtifacts := "map[string]*WorkloadComponentArtifacts{"
	for _, k := range keysForComponentArtifacts {
		mapStringForComponentArtifacts += fmt.Sprintf("%#v: %#v,", k, this.ComponentArtifacts[k])
	}
	mapStringForComponentArtifacts += "}"
	if this.ComponentArtifacts != nil {
		s = append(s, "ComponentArtifacts: "+mapStringForComponentArtifacts+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkloadComponentArtifacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&artifactspb.WorkloadComponentArtifacts{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringArtifacts(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ExperimentArtifacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExperimentArtifacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExperimentArtifacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkloadArtifacts) > 0 {
		for iNdEx := len(m.WorkloadArtifacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkloadArtifacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArtifacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.VizierArtifacts != nil {
		{
			size, err := m.VizierArtifacts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArtifacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkloadArtifacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadArtifacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkloadArtifacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ComponentArtifacts) > 0 {
		for k := range m.ComponentArtifacts {
			v := m.ComponentArtifacts[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintArtifacts(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintArtifacts(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintArtifacts(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkloadComponentArtifacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkloadComponentArtifacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkloadComponentArtifacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintArtifacts(dAtA []byte, offset int, v uint64) int {
	offset -= sovArtifacts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExperimentArtifacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VizierArtifacts != nil {
		l = m.VizierArtifacts.Size()
		n += 1 + l + sovArtifacts(uint64(l))
	}
	if len(m.WorkloadArtifacts) > 0 {
		for _, e := range m.WorkloadArtifacts {
			l = e.Size()
			n += 1 + l + sovArtifacts(uint64(l))
		}
	}
	return n
}

func (m *WorkloadArtifacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ComponentArtifacts) > 0 {
		for k, v := range m.ComponentArtifacts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovArtifacts(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovArtifacts(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovArtifacts(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *WorkloadComponentArtifacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovArtifacts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArtifacts(x uint64) (n int) {
	return sovArtifacts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ExperimentArtifacts) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWorkloadArtifacts := "[]*WorkloadArtifacts{"
	for _, f := range this.WorkloadArtifacts {
		repeatedStringForWorkloadArtifacts += strings.Replace(f.String(), "WorkloadArtifacts", "WorkloadArtifacts", 1) + ","
	}
	repeatedStringForWorkloadArtifacts += "}"
	s := strings.Join([]string{`&ExperimentArtifacts{`,
		`VizierArtifacts:` + strings.Replace(this.VizierArtifacts.String(), "WorkloadArtifacts", "WorkloadArtifacts", 1) + `,`,
		`WorkloadArtifacts:` + repeatedStringForWorkloadArtifacts + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkloadArtifacts) String() string {
	if this == nil {
		return "nil"
	}
	keysForComponentArtifacts := make([]string, 0, len(this.ComponentArtifacts))
	for k, _ := range this.ComponentArtifacts {
		keysForComponentArtifacts = append(keysForComponentArtifacts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForComponentArtifacts)
	mapStringForComponentArtifacts := "map[string]*WorkloadComponentArtifacts{"
	for _, k := range keysForComponentArtifacts {
		mapStringForComponentArtifacts += fmt.Sprintf("%v: %v,", k, this.ComponentArtifacts[k])
	}
	mapStringForComponentArtifacts += "}"
	s := strings.Join([]string{`&WorkloadArtifacts{`,
		`ComponentArtifacts:` + mapStringForComponentArtifacts + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkloadComponentArtifacts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkloadComponentArtifacts{`,
		`}`,
	}, "")
	return s
}
func valueToStringArtifacts(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ExperimentArtifacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArtifacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExperimentArtifacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExperimentArtifacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VizierArtifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArtifacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArtifacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArtifacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VizierArtifacts == nil {
				m.VizierArtifacts = &WorkloadArtifacts{}
			}
			if err := m.VizierArtifacts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadArtifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArtifacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArtifacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArtifacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadArtifacts = append(m.WorkloadArtifacts, &WorkloadArtifacts{})
			if err := m.WorkloadArtifacts[len(m.WorkloadArtifacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArtifacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArtifacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadArtifacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArtifacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadArtifacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadArtifacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComponentArtifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArtifacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArtifacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArtifacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ComponentArtifacts == nil {
				m.ComponentArtifacts = make(map[string]*WorkloadComponentArtifacts)
			}
			var mapkey string
			var mapvalue *WorkloadComponentArtifacts
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowArtifacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowArtifacts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthArtifacts
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthArtifacts
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowArtifacts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthArtifacts
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthArtifacts
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WorkloadComponentArtifacts{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipArtifacts(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthArtifacts
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ComponentArtifacts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArtifacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArtifacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkloadComponentArtifacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArtifacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkloadComponentArtifacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkloadComponentArtifacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArtifacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArtifacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArtifacts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArtifacts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArtifacts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArtifacts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArtifacts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArtifacts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArtifacts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArtifacts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArtifacts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArtifacts = fmt.Errorf("proto: unexpected end of group")
)
