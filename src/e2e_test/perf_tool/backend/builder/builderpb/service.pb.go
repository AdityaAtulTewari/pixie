// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/e2e_test/perf_tool/backend/builder/builderpb/service.proto

package builderpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	artifactspb "px.dev/pixie/src/e2e_test/perf_tool/artifactspb"
	sharedpb "px.dev/pixie/src/e2e_test/perf_tool/backend/sharedpb"
	experimentpb "px.dev/pixie/src/e2e_test/perf_tool/experimentpb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StartBuildRequest struct {
	ExperimentID *sharedpb.ExperimentRunID    `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	Spec         *experimentpb.ExperimentSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *StartBuildRequest) Reset()      { *m = StartBuildRequest{} }
func (*StartBuildRequest) ProtoMessage() {}
func (*StartBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19c042416cd255bd, []int{0}
}
func (m *StartBuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartBuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartBuildRequest.Merge(m, src)
}
func (m *StartBuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartBuildRequest proto.InternalMessageInfo

func (m *StartBuildRequest) GetExperimentID() *sharedpb.ExperimentRunID {
	if m != nil {
		return m.ExperimentID
	}
	return nil
}

func (m *StartBuildRequest) GetSpec() *experimentpb.ExperimentSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type StartBuildResponse struct {
}

func (m *StartBuildResponse) Reset()      { *m = StartBuildResponse{} }
func (*StartBuildResponse) ProtoMessage() {}
func (*StartBuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19c042416cd255bd, []int{1}
}
func (m *StartBuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartBuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartBuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartBuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartBuildResponse.Merge(m, src)
}
func (m *StartBuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartBuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartBuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartBuildResponse proto.InternalMessageInfo

type GetBuildArtifactsRequest struct {
	ExperimentID *sharedpb.ExperimentRunID `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (m *GetBuildArtifactsRequest) Reset()      { *m = GetBuildArtifactsRequest{} }
func (*GetBuildArtifactsRequest) ProtoMessage() {}
func (*GetBuildArtifactsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19c042416cd255bd, []int{2}
}
func (m *GetBuildArtifactsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBuildArtifactsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBuildArtifactsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBuildArtifactsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBuildArtifactsRequest.Merge(m, src)
}
func (m *GetBuildArtifactsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBuildArtifactsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBuildArtifactsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBuildArtifactsRequest proto.InternalMessageInfo

func (m *GetBuildArtifactsRequest) GetExperimentID() *sharedpb.ExperimentRunID {
	if m != nil {
		return m.ExperimentID
	}
	return nil
}

type GetBuildArtifactsResponse struct {
	Artifacts *artifactspb.ExperimentArtifacts `protobuf:"bytes,1,opt,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (m *GetBuildArtifactsResponse) Reset()      { *m = GetBuildArtifactsResponse{} }
func (*GetBuildArtifactsResponse) ProtoMessage() {}
func (*GetBuildArtifactsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19c042416cd255bd, []int{3}
}
func (m *GetBuildArtifactsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBuildArtifactsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBuildArtifactsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBuildArtifactsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBuildArtifactsResponse.Merge(m, src)
}
func (m *GetBuildArtifactsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBuildArtifactsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBuildArtifactsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBuildArtifactsResponse proto.InternalMessageInfo

func (m *GetBuildArtifactsResponse) GetArtifacts() *artifactspb.ExperimentArtifacts {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

type InsertBuildArtifactsRequest struct {
	ExperimentID *sharedpb.ExperimentRunID        `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	Artifacts    *artifactspb.ExperimentArtifacts `protobuf:"bytes,2,opt,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (m *InsertBuildArtifactsRequest) Reset()      { *m = InsertBuildArtifactsRequest{} }
func (*InsertBuildArtifactsRequest) ProtoMessage() {}
func (*InsertBuildArtifactsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19c042416cd255bd, []int{4}
}
func (m *InsertBuildArtifactsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsertBuildArtifactsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsertBuildArtifactsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsertBuildArtifactsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertBuildArtifactsRequest.Merge(m, src)
}
func (m *InsertBuildArtifactsRequest) XXX_Size() int {
	return m.Size()
}
func (m *InsertBuildArtifactsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertBuildArtifactsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InsertBuildArtifactsRequest proto.InternalMessageInfo

func (m *InsertBuildArtifactsRequest) GetExperimentID() *sharedpb.ExperimentRunID {
	if m != nil {
		return m.ExperimentID
	}
	return nil
}

func (m *InsertBuildArtifactsRequest) GetArtifacts() *artifactspb.ExperimentArtifacts {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

type InsertBuildArtifactsResponse struct {
}

func (m *InsertBuildArtifactsResponse) Reset()      { *m = InsertBuildArtifactsResponse{} }
func (*InsertBuildArtifactsResponse) ProtoMessage() {}
func (*InsertBuildArtifactsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19c042416cd255bd, []int{5}
}
func (m *InsertBuildArtifactsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsertBuildArtifactsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsertBuildArtifactsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsertBuildArtifactsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertBuildArtifactsResponse.Merge(m, src)
}
func (m *InsertBuildArtifactsResponse) XXX_Size() int {
	return m.Size()
}
func (m *InsertBuildArtifactsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertBuildArtifactsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InsertBuildArtifactsResponse proto.InternalMessageInfo

type BuildFailedRequest struct {
	ExperimentID *sharedpb.ExperimentRunID `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	ErrMsg       string                    `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *BuildFailedRequest) Reset()      { *m = BuildFailedRequest{} }
func (*BuildFailedRequest) ProtoMessage() {}
func (*BuildFailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19c042416cd255bd, []int{6}
}
func (m *BuildFailedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildFailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildFailedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildFailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildFailedRequest.Merge(m, src)
}
func (m *BuildFailedRequest) XXX_Size() int {
	return m.Size()
}
func (m *BuildFailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildFailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BuildFailedRequest proto.InternalMessageInfo

func (m *BuildFailedRequest) GetExperimentID() *sharedpb.ExperimentRunID {
	if m != nil {
		return m.ExperimentID
	}
	return nil
}

func (m *BuildFailedRequest) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type BuildFailedResponse struct {
}

func (m *BuildFailedResponse) Reset()      { *m = BuildFailedResponse{} }
func (*BuildFailedResponse) ProtoMessage() {}
func (*BuildFailedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19c042416cd255bd, []int{7}
}
func (m *BuildFailedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildFailedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildFailedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildFailedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildFailedResponse.Merge(m, src)
}
func (m *BuildFailedResponse) XXX_Size() int {
	return m.Size()
}
func (m *BuildFailedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildFailedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BuildFailedResponse proto.InternalMessageInfo

type GetBuildJobRequest struct {
	ExperimentID *sharedpb.ExperimentRunID `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (m *GetBuildJobRequest) Reset()      { *m = GetBuildJobRequest{} }
func (*GetBuildJobRequest) ProtoMessage() {}
func (*GetBuildJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_19c042416cd255bd, []int{8}
}
func (m *GetBuildJobRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBuildJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBuildJobRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBuildJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBuildJobRequest.Merge(m, src)
}
func (m *GetBuildJobRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBuildJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBuildJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBuildJobRequest proto.InternalMessageInfo

func (m *GetBuildJobRequest) GetExperimentID() *sharedpb.ExperimentRunID {
	if m != nil {
		return m.ExperimentID
	}
	return nil
}

type GetBuildJobResponse struct {
	Spec *experimentpb.ExperimentSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *GetBuildJobResponse) Reset()      { *m = GetBuildJobResponse{} }
func (*GetBuildJobResponse) ProtoMessage() {}
func (*GetBuildJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_19c042416cd255bd, []int{9}
}
func (m *GetBuildJobResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBuildJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBuildJobResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBuildJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBuildJobResponse.Merge(m, src)
}
func (m *GetBuildJobResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBuildJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBuildJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBuildJobResponse proto.InternalMessageInfo

func (m *GetBuildJobResponse) GetSpec() *experimentpb.ExperimentSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func init() {
	proto.RegisterType((*StartBuildRequest)(nil), "px.perf_tool.StartBuildRequest")
	proto.RegisterType((*StartBuildResponse)(nil), "px.perf_tool.StartBuildResponse")
	proto.RegisterType((*GetBuildArtifactsRequest)(nil), "px.perf_tool.GetBuildArtifactsRequest")
	proto.RegisterType((*GetBuildArtifactsResponse)(nil), "px.perf_tool.GetBuildArtifactsResponse")
	proto.RegisterType((*InsertBuildArtifactsRequest)(nil), "px.perf_tool.InsertBuildArtifactsRequest")
	proto.RegisterType((*InsertBuildArtifactsResponse)(nil), "px.perf_tool.InsertBuildArtifactsResponse")
	proto.RegisterType((*BuildFailedRequest)(nil), "px.perf_tool.BuildFailedRequest")
	proto.RegisterType((*BuildFailedResponse)(nil), "px.perf_tool.BuildFailedResponse")
	proto.RegisterType((*GetBuildJobRequest)(nil), "px.perf_tool.GetBuildJobRequest")
	proto.RegisterType((*GetBuildJobResponse)(nil), "px.perf_tool.GetBuildJobResponse")
}

func init() {
	proto.RegisterFile("src/e2e_test/perf_tool/backend/builder/builderpb/service.proto", fileDescriptor_19c042416cd255bd)
}

var fileDescriptor_19c042416cd255bd = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xf5, 0x54, 0x9f, 0xfa, 0xa9, 0xb7, 0x05, 0xd1, 0x69, 0x11, 0xc5, 0x94, 0x69, 0xea, 0x05,
	0x7f, 0x12, 0x31, 0x0a, 0xac, 0xa9, 0x08, 0x85, 0x2a, 0x48, 0x08, 0xc9, 0x45, 0x42, 0x42, 0x48,
	0x91, 0x7f, 0x6e, 0x52, 0xd3, 0xc4, 0x63, 0x66, 0x26, 0xa8, 0x4b, 0x24, 0x5e, 0x80, 0x3d, 0x2f,
	0xc0, 0x03, 0xb0, 0xe1, 0x09, 0x60, 0x99, 0x65, 0x57, 0x88, 0x38, 0x1b, 0x96, 0x7d, 0x04, 0x54,
	0xff, 0xc4, 0x71, 0x13, 0xb7, 0x15, 0x52, 0x58, 0x65, 0x66, 0x72, 0xcf, 0x3d, 0xe7, 0xcc, 0xbd,
	0x77, 0x0c, 0x0f, 0xa5, 0x70, 0x4d, 0xac, 0x61, 0x53, 0xa1, 0x54, 0x66, 0x88, 0xa2, 0xd5, 0x54,
	0x9c, 0x77, 0x4c, 0xc7, 0x76, 0xf7, 0x31, 0xf0, 0x4c, 0xa7, 0xe7, 0x77, 0x3c, 0x14, 0xd9, 0x6f,
	0xe8, 0x98, 0x12, 0xc5, 0x7b, 0xdf, 0xc5, 0x6a, 0x28, 0xb8, 0xe2, 0x74, 0x29, 0x3c, 0xa8, 0x8e,
	0x50, 0xfa, 0xdd, 0xb6, 0xaf, 0xf6, 0x7a, 0x4e, 0xd5, 0xe5, 0x5d, 0xb3, 0xcd, 0xdb, 0xdc, 0x8c,
	0x83, 0x9c, 0x5e, 0x2b, 0xde, 0xc5, 0x9b, 0x78, 0x95, 0x80, 0xf5, 0x07, 0x25, 0xe4, 0x78, 0x10,
	0xa2, 0xf0, 0xbb, 0x18, 0xa8, 0xd0, 0x19, 0xdb, 0xa4, 0xa8, 0x5a, 0x09, 0xca, 0x16, 0xca, 0x6f,
	0xd9, 0xae, 0x92, 0xa1, 0x93, 0xaf, 0xcf, 0x60, 0xca, 0x6c, 0xca, 0x3d, 0x5b, 0xa0, 0x77, 0xec,
	0x2e, 0x5e, 0x24, 0x28, 0xe3, 0x33, 0x81, 0xe5, 0x5d, 0x65, 0x0b, 0x55, 0x3f, 0x76, 0x6f, 0xe1,
	0xbb, 0x1e, 0x4a, 0x45, 0x5f, 0xc2, 0x85, 0x5c, 0x53, 0xd3, 0xf7, 0xd6, 0x48, 0x85, 0xdc, 0x5a,
	0xac, 0x5d, 0xaf, 0x8e, 0x5f, 0x45, 0xf5, 0xc9, 0x28, 0xc4, 0xea, 0x05, 0x8d, 0xed, 0xfa, 0xa5,
	0xe8, 0xe7, 0xc6, 0x52, 0x7e, 0xd8, 0xd8, 0xb6, 0x96, 0xf2, 0x2c, 0x0d, 0x8f, 0xde, 0x83, 0xff,
	0x64, 0x88, 0xee, 0xda, 0x5c, 0x9c, 0x6c, 0xbd, 0x2c, 0xd9, 0x6e, 0x88, 0xae, 0x15, 0x47, 0x1a,
	0xab, 0x40, 0xc7, 0xc5, 0xc9, 0x90, 0x07, 0x12, 0x8d, 0x10, 0xd6, 0x76, 0x30, 0x39, 0x7b, 0x94,
	0x5d, 0xc2, 0x4c, 0x95, 0x1b, 0x6f, 0xe0, 0xea, 0x14, 0xc6, 0x44, 0x0e, 0xdd, 0x82, 0x85, 0x51,
	0x2d, 0x52, 0xba, 0xcd, 0x32, 0xba, 0x1c, 0x9d, 0x63, 0x8c, 0xaf, 0x04, 0xae, 0x35, 0x02, 0x89,
	0xe2, 0x5f, 0x7a, 0x2a, 0xca, 0x9e, 0xfb, 0x0b, 0xd9, 0x0c, 0xd6, 0xa7, 0xab, 0x4e, 0xcb, 0xf4,
	0x91, 0x00, 0x8d, 0xff, 0x7a, 0x6a, 0xfb, 0x1d, 0x9c, 0x71, 0x6f, 0x5d, 0x81, 0xff, 0x51, 0x88,
	0x66, 0x57, 0xb6, 0x63, 0x2f, 0x0b, 0xd6, 0x3c, 0x0a, 0xf1, 0x5c, 0xb6, 0x8d, 0xcb, 0xb0, 0x52,
	0x10, 0x91, 0x8a, 0x7b, 0x0b, 0x34, 0xab, 0xe8, 0x33, 0xee, 0xcc, 0xb6, 0x7b, 0x76, 0x60, 0xa5,
	0xc0, 0x95, 0xf6, 0x4d, 0x36, 0x0e, 0xe4, 0xbc, 0xe3, 0x50, 0xfb, 0x4e, 0xe0, 0x62, 0x3d, 0x79,
	0xa5, 0x76, 0x93, 0x27, 0x8a, 0xbe, 0x00, 0xc8, 0x27, 0x84, 0x6e, 0x14, 0x93, 0x4c, 0x0c, 0xb6,
	0x5e, 0x29, 0x0f, 0x48, 0x55, 0x79, 0xb0, 0x3c, 0xd1, 0xea, 0xf4, 0x46, 0x11, 0x56, 0x36, 0x7d,
	0xfa, 0xcd, 0x33, 0xe3, 0x12, 0x96, 0xda, 0xb7, 0x39, 0xa8, 0xa4, 0x4e, 0x5e, 0x71, 0xb1, 0x8f,
	0xe2, 0x31, 0xe7, 0xc2, 0xf3, 0x03, 0x5b, 0xf9, 0x3c, 0xc8, 0xbc, 0x59, 0xb0, 0x38, 0x76, 0x6f,
	0xb4, 0x32, 0x3d, 0x79, 0x5e, 0x3e, 0x7d, 0xf3, 0x94, 0x88, 0xd4, 0x5e, 0x17, 0x56, 0xa7, 0x35,
	0x2d, 0xbd, 0x5d, 0x84, 0x9e, 0x32, 0x8e, 0xfa, 0x9d, 0xf3, 0x84, 0xa6, 0x74, 0x16, 0x2c, 0x8e,
	0x75, 0xdf, 0x49, 0x0b, 0x93, 0xd3, 0x71, 0xd2, 0xc2, 0x94, 0xd6, 0xad, 0x6f, 0xf5, 0x07, 0x4c,
	0x3b, 0x1c, 0x30, 0xed, 0x68, 0xc0, 0xc8, 0x87, 0x88, 0x91, 0x2f, 0x11, 0x23, 0x3f, 0x22, 0x46,
	0xfa, 0x11, 0x23, 0xbf, 0x22, 0x46, 0x7e, 0x47, 0x4c, 0x3b, 0x8a, 0x18, 0xf9, 0x34, 0x64, 0x5a,
	0x7f, 0xc8, 0xb4, 0xc3, 0x21, 0xd3, 0x5e, 0x2f, 0x8c, 0x3e, 0x6f, 0xce, 0x7c, 0xfc, 0xf4, 0xdf,
	0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x49, 0x28, 0x82, 0xa5, 0x19, 0x07, 0x00, 0x00,
}

func (this *StartBuildRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartBuildRequest)
	if !ok {
		that2, ok := that.(StartBuildRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExperimentID.Equal(that1.ExperimentID) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *StartBuildResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartBuildResponse)
	if !ok {
		that2, ok := that.(StartBuildResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetBuildArtifactsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBuildArtifactsRequest)
	if !ok {
		that2, ok := that.(GetBuildArtifactsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExperimentID.Equal(that1.ExperimentID) {
		return false
	}
	return true
}
func (this *GetBuildArtifactsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBuildArtifactsResponse)
	if !ok {
		that2, ok := that.(GetBuildArtifactsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Artifacts.Equal(that1.Artifacts) {
		return false
	}
	return true
}
func (this *InsertBuildArtifactsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertBuildArtifactsRequest)
	if !ok {
		that2, ok := that.(InsertBuildArtifactsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExperimentID.Equal(that1.ExperimentID) {
		return false
	}
	if !this.Artifacts.Equal(that1.Artifacts) {
		return false
	}
	return true
}
func (this *InsertBuildArtifactsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertBuildArtifactsResponse)
	if !ok {
		that2, ok := that.(InsertBuildArtifactsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BuildFailedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BuildFailedRequest)
	if !ok {
		that2, ok := that.(BuildFailedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExperimentID.Equal(that1.ExperimentID) {
		return false
	}
	if this.ErrMsg != that1.ErrMsg {
		return false
	}
	return true
}
func (this *BuildFailedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BuildFailedResponse)
	if !ok {
		that2, ok := that.(BuildFailedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetBuildJobRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBuildJobRequest)
	if !ok {
		that2, ok := that.(GetBuildJobRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExperimentID.Equal(that1.ExperimentID) {
		return false
	}
	return true
}
func (this *GetBuildJobResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBuildJobResponse)
	if !ok {
		that2, ok := that.(GetBuildJobResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *StartBuildRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&builderpb.StartBuildRequest{")
	if this.ExperimentID != nil {
		s = append(s, "ExperimentID: "+fmt.Sprintf("%#v", this.ExperimentID)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartBuildResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&builderpb.StartBuildResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBuildArtifactsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&builderpb.GetBuildArtifactsRequest{")
	if this.ExperimentID != nil {
		s = append(s, "ExperimentID: "+fmt.Sprintf("%#v", this.ExperimentID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBuildArtifactsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&builderpb.GetBuildArtifactsResponse{")
	if this.Artifacts != nil {
		s = append(s, "Artifacts: "+fmt.Sprintf("%#v", this.Artifacts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InsertBuildArtifactsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&builderpb.InsertBuildArtifactsRequest{")
	if this.ExperimentID != nil {
		s = append(s, "ExperimentID: "+fmt.Sprintf("%#v", this.ExperimentID)+",\n")
	}
	if this.Artifacts != nil {
		s = append(s, "Artifacts: "+fmt.Sprintf("%#v", this.Artifacts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InsertBuildArtifactsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&builderpb.InsertBuildArtifactsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BuildFailedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&builderpb.BuildFailedRequest{")
	if this.ExperimentID != nil {
		s = append(s, "ExperimentID: "+fmt.Sprintf("%#v", this.ExperimentID)+",\n")
	}
	s = append(s, "ErrMsg: "+fmt.Sprintf("%#v", this.ErrMsg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BuildFailedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&builderpb.BuildFailedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBuildJobRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&builderpb.GetBuildJobRequest{")
	if this.ExperimentID != nil {
		s = append(s, "ExperimentID: "+fmt.Sprintf("%#v", this.ExperimentID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBuildJobResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&builderpb.GetBuildJobResponse{")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BuilderServiceClient is the client API for BuilderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuilderServiceClient interface {
	StartBuild(ctx context.Context, in *StartBuildRequest, opts ...grpc.CallOption) (*StartBuildResponse, error)
	GetBuildArtifacts(ctx context.Context, in *GetBuildArtifactsRequest, opts ...grpc.CallOption) (*GetBuildArtifactsResponse, error)
}

type builderServiceClient struct {
	cc *grpc.ClientConn
}

func NewBuilderServiceClient(cc *grpc.ClientConn) BuilderServiceClient {
	return &builderServiceClient{cc}
}

func (c *builderServiceClient) StartBuild(ctx context.Context, in *StartBuildRequest, opts ...grpc.CallOption) (*StartBuildResponse, error) {
	out := new(StartBuildResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.BuilderService/StartBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderServiceClient) GetBuildArtifacts(ctx context.Context, in *GetBuildArtifactsRequest, opts ...grpc.CallOption) (*GetBuildArtifactsResponse, error) {
	out := new(GetBuildArtifactsResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.BuilderService/GetBuildArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderServiceServer is the server API for BuilderService service.
type BuilderServiceServer interface {
	StartBuild(context.Context, *StartBuildRequest) (*StartBuildResponse, error)
	GetBuildArtifacts(context.Context, *GetBuildArtifactsRequest) (*GetBuildArtifactsResponse, error)
}

// UnimplementedBuilderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBuilderServiceServer struct {
}

func (*UnimplementedBuilderServiceServer) StartBuild(ctx context.Context, req *StartBuildRequest) (*StartBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBuild not implemented")
}
func (*UnimplementedBuilderServiceServer) GetBuildArtifacts(ctx context.Context, req *GetBuildArtifactsRequest) (*GetBuildArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildArtifacts not implemented")
}

func RegisterBuilderServiceServer(s *grpc.Server, srv BuilderServiceServer) {
	s.RegisterService(&_BuilderService_serviceDesc, srv)
}

func _BuilderService_StartBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).StartBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.BuilderService/StartBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).StartBuild(ctx, req.(*StartBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderService_GetBuildArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).GetBuildArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.BuilderService/GetBuildArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).GetBuildArtifacts(ctx, req.(*GetBuildArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuilderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.perf_tool.BuilderService",
	HandlerType: (*BuilderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartBuild",
			Handler:    _BuilderService_StartBuild_Handler,
		},
		{
			MethodName: "GetBuildArtifacts",
			Handler:    _BuilderService_GetBuildArtifacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/e2e_test/perf_tool/backend/builder/builderpb/service.proto",
}

// BuilderWorkerCoordinationServiceClient is the client API for BuilderWorkerCoordinationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuilderWorkerCoordinationServiceClient interface {
	GetBuildJob(ctx context.Context, in *GetBuildJobRequest, opts ...grpc.CallOption) (*GetBuildJobResponse, error)
	InsertBuildArtifacts(ctx context.Context, in *InsertBuildArtifactsRequest, opts ...grpc.CallOption) (*InsertBuildArtifactsResponse, error)
	BuildFailed(ctx context.Context, in *BuildFailedRequest, opts ...grpc.CallOption) (*BuildFailedResponse, error)
}

type builderWorkerCoordinationServiceClient struct {
	cc *grpc.ClientConn
}

func NewBuilderWorkerCoordinationServiceClient(cc *grpc.ClientConn) BuilderWorkerCoordinationServiceClient {
	return &builderWorkerCoordinationServiceClient{cc}
}

func (c *builderWorkerCoordinationServiceClient) GetBuildJob(ctx context.Context, in *GetBuildJobRequest, opts ...grpc.CallOption) (*GetBuildJobResponse, error) {
	out := new(GetBuildJobResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.BuilderWorkerCoordinationService/GetBuildJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderWorkerCoordinationServiceClient) InsertBuildArtifacts(ctx context.Context, in *InsertBuildArtifactsRequest, opts ...grpc.CallOption) (*InsertBuildArtifactsResponse, error) {
	out := new(InsertBuildArtifactsResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.BuilderWorkerCoordinationService/InsertBuildArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderWorkerCoordinationServiceClient) BuildFailed(ctx context.Context, in *BuildFailedRequest, opts ...grpc.CallOption) (*BuildFailedResponse, error) {
	out := new(BuildFailedResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.BuilderWorkerCoordinationService/BuildFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderWorkerCoordinationServiceServer is the server API for BuilderWorkerCoordinationService service.
type BuilderWorkerCoordinationServiceServer interface {
	GetBuildJob(context.Context, *GetBuildJobRequest) (*GetBuildJobResponse, error)
	InsertBuildArtifacts(context.Context, *InsertBuildArtifactsRequest) (*InsertBuildArtifactsResponse, error)
	BuildFailed(context.Context, *BuildFailedRequest) (*BuildFailedResponse, error)
}

// UnimplementedBuilderWorkerCoordinationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBuilderWorkerCoordinationServiceServer struct {
}

func (*UnimplementedBuilderWorkerCoordinationServiceServer) GetBuildJob(ctx context.Context, req *GetBuildJobRequest) (*GetBuildJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildJob not implemented")
}
func (*UnimplementedBuilderWorkerCoordinationServiceServer) InsertBuildArtifacts(ctx context.Context, req *InsertBuildArtifactsRequest) (*InsertBuildArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertBuildArtifacts not implemented")
}
func (*UnimplementedBuilderWorkerCoordinationServiceServer) BuildFailed(ctx context.Context, req *BuildFailedRequest) (*BuildFailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildFailed not implemented")
}

func RegisterBuilderWorkerCoordinationServiceServer(s *grpc.Server, srv BuilderWorkerCoordinationServiceServer) {
	s.RegisterService(&_BuilderWorkerCoordinationService_serviceDesc, srv)
}

func _BuilderWorkerCoordinationService_GetBuildJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderWorkerCoordinationServiceServer).GetBuildJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.BuilderWorkerCoordinationService/GetBuildJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderWorkerCoordinationServiceServer).GetBuildJob(ctx, req.(*GetBuildJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderWorkerCoordinationService_InsertBuildArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertBuildArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderWorkerCoordinationServiceServer).InsertBuildArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.BuilderWorkerCoordinationService/InsertBuildArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderWorkerCoordinationServiceServer).InsertBuildArtifacts(ctx, req.(*InsertBuildArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderWorkerCoordinationService_BuildFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildFailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderWorkerCoordinationServiceServer).BuildFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.BuilderWorkerCoordinationService/BuildFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderWorkerCoordinationServiceServer).BuildFailed(ctx, req.(*BuildFailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuilderWorkerCoordinationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.perf_tool.BuilderWorkerCoordinationService",
	HandlerType: (*BuilderWorkerCoordinationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBuildJob",
			Handler:    _BuilderWorkerCoordinationService_GetBuildJob_Handler,
		},
		{
			MethodName: "InsertBuildArtifacts",
			Handler:    _BuilderWorkerCoordinationService_InsertBuildArtifacts_Handler,
		},
		{
			MethodName: "BuildFailed",
			Handler:    _BuilderWorkerCoordinationService_BuildFailed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/e2e_test/perf_tool/backend/builder/builderpb/service.proto",
}

func (m *StartBuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartBuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartBuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExperimentID != nil {
		{
			size, err := m.ExperimentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartBuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartBuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartBuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetBuildArtifactsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBuildArtifactsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBuildArtifactsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExperimentID != nil {
		{
			size, err := m.ExperimentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBuildArtifactsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBuildArtifactsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBuildArtifactsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Artifacts != nil {
		{
			size, err := m.Artifacts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InsertBuildArtifactsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertBuildArtifactsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertBuildArtifactsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Artifacts != nil {
		{
			size, err := m.Artifacts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExperimentID != nil {
		{
			size, err := m.ExperimentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InsertBuildArtifactsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertBuildArtifactsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertBuildArtifactsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BuildFailedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildFailedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildFailedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintService(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.ExperimentID != nil {
		{
			size, err := m.ExperimentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuildFailedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildFailedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildFailedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetBuildJobRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBuildJobRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBuildJobRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExperimentID != nil {
		{
			size, err := m.ExperimentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBuildJobResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBuildJobResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBuildJobResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StartBuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExperimentID != nil {
		l = m.ExperimentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *StartBuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetBuildArtifactsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExperimentID != nil {
		l = m.ExperimentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetBuildArtifactsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Artifacts != nil {
		l = m.Artifacts.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *InsertBuildArtifactsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExperimentID != nil {
		l = m.ExperimentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Artifacts != nil {
		l = m.Artifacts.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *InsertBuildArtifactsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BuildFailedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExperimentID != nil {
		l = m.ExperimentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *BuildFailedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetBuildJobRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExperimentID != nil {
		l = m.ExperimentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetBuildJobResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StartBuildRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartBuildRequest{`,
		`ExperimentID:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentID), "ExperimentRunID", "sharedpb.ExperimentRunID", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ExperimentSpec", "experimentpb.ExperimentSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartBuildResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartBuildResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetBuildArtifactsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBuildArtifactsRequest{`,
		`ExperimentID:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentID), "ExperimentRunID", "sharedpb.ExperimentRunID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBuildArtifactsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBuildArtifactsResponse{`,
		`Artifacts:` + strings.Replace(fmt.Sprintf("%v", this.Artifacts), "ExperimentArtifacts", "artifactspb.ExperimentArtifacts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InsertBuildArtifactsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InsertBuildArtifactsRequest{`,
		`ExperimentID:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentID), "ExperimentRunID", "sharedpb.ExperimentRunID", 1) + `,`,
		`Artifacts:` + strings.Replace(fmt.Sprintf("%v", this.Artifacts), "ExperimentArtifacts", "artifactspb.ExperimentArtifacts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InsertBuildArtifactsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InsertBuildArtifactsResponse{`,
		`}`,
	}, "")
	return s
}
func (this *BuildFailedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BuildFailedRequest{`,
		`ExperimentID:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentID), "ExperimentRunID", "sharedpb.ExperimentRunID", 1) + `,`,
		`ErrMsg:` + fmt.Sprintf("%v", this.ErrMsg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BuildFailedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BuildFailedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetBuildJobRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBuildJobRequest{`,
		`ExperimentID:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentID), "ExperimentRunID", "sharedpb.ExperimentRunID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBuildJobResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBuildJobResponse{`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ExperimentSpec", "experimentpb.ExperimentSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StartBuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartBuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartBuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentID == nil {
				m.ExperimentID = &sharedpb.ExperimentRunID{}
			}
			if err := m.ExperimentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &experimentpb.ExperimentSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartBuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartBuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartBuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBuildArtifactsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBuildArtifactsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBuildArtifactsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentID == nil {
				m.ExperimentID = &sharedpb.ExperimentRunID{}
			}
			if err := m.ExperimentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBuildArtifactsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBuildArtifactsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBuildArtifactsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Artifacts == nil {
				m.Artifacts = &artifactspb.ExperimentArtifacts{}
			}
			if err := m.Artifacts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertBuildArtifactsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertBuildArtifactsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertBuildArtifactsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentID == nil {
				m.ExperimentID = &sharedpb.ExperimentRunID{}
			}
			if err := m.ExperimentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Artifacts == nil {
				m.Artifacts = &artifactspb.ExperimentArtifacts{}
			}
			if err := m.Artifacts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertBuildArtifactsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertBuildArtifactsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertBuildArtifactsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildFailedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildFailedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildFailedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentID == nil {
				m.ExperimentID = &sharedpb.ExperimentRunID{}
			}
			if err := m.ExperimentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildFailedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildFailedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildFailedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBuildJobRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBuildJobRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBuildJobRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentID == nil {
				m.ExperimentID = &sharedpb.ExperimentRunID{}
			}
			if err := m.ExperimentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBuildJobResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBuildJobResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBuildJobResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &experimentpb.ExperimentSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
