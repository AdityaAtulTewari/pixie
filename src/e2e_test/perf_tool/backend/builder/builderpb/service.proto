/*
 * Copyright 2018- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package px.perf_tool;

option go_package = "builderpb";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/e2e_test/perf_tool/experimentpb/experiment.proto";
import "src/e2e_test/perf_tool/artifactspb/artifacts.proto";
import "src/e2e_test/perf_tool/backend/sharedpb/shared.proto";

// BuilderService provides RPCs for requesting building of an experiment and for getting the output
// artifacts from builds.
service BuilderService {
  // StartBuild queues building of the given experiment. This RPC is handled asynchronously by the
  // builder service.
  rpc StartBuild(StartBuildRequest) returns (StartBuildResponse);
  // GetBuildArtifacts returns the ExperimentArtifacts for a given experiment. This RPC expects that
  // the build for the given experiment has already completed, and will error if that's not the
  // case.
  rpc GetBuildArtifacts(GetBuildArtifactsRequest) returns (GetBuildArtifactsResponse);
}

// BuilderWorkerCoordinatorService provides RPCs for communication between the builder service and
// the k8s jobs it spawns.
service BuilderWorkerCoordinationService {
  // GetBuildJob returns the relevant info about a build job. It is called on startup by the k8s
  // jobs the builder service spawns. This avoids needing to encode the build job spec inside the
  // k8s job definition.
  rpc GetBuildJob(GetBuildJobRequest) returns (GetBuildJobResponse);
  // InsertBuildArtifacts inserts the given build artifacts into the builder's datastore associated
  // with the given experiment ID. This RPC is called by the k8s build job, on successful completion
  // of a build.
  rpc InsertBuildArtifacts(InsertBuildArtifactsRequest) returns (InsertBuildArtifactsResponse);
  // BuildFailed notifies the builder service of the failure of a k8s build job.
  rpc BuildFailed(BuildFailedRequest) returns (BuildFailedResponse);
}

// StartBuildRequest specifies the ExperimentSpec for a given experiment ID. Its used in the
// StartBuild RPC to notify the builder service to queue building of the given experiment.
message StartBuildRequest {
  ExperimentRunID experiment_id = 1 [ (gogoproto.customname) = "ExperimentID" ];
  ExperimentSpec spec = 2;
}

// StartBuild doesn't return a response so StartBuildResponse is empty.
message StartBuildResponse {}

// GetBuildArtifactsRequest contains the experiment ID to get the build artifacts for.
message GetBuildArtifactsRequest {
  ExperimentRunID experiment_id = 1 [ (gogoproto.customname) = "ExperimentID" ];
}

// GetBuildArtifactsResponse contains the build artifacts for the experiment specified by
// GetBuildArtifactsRequest.
message GetBuildArtifactsResponse {
  ExperimentArtifacts artifacts = 1;
}

// InsertBuildArtifactsRequest contains both the experiment ID and that experiment's corresponding
// build artifacts.
message InsertBuildArtifactsRequest {
  ExperimentRunID experiment_id = 1 [ (gogoproto.customname) = "ExperimentID" ];
  ExperimentArtifacts artifacts = 2;
}

// InsertBuildArtifacts doesn't return a response so InsertBuildArtifactsResponse is empty.
message InsertBuildArtifactsResponse {}

// BuildFailedRequest contains the experiment ID for the failed build, along with an error message
// about its failure.
message BuildFailedRequest {
  ExperimentRunID experiment_id = 1 [ (gogoproto.customname) = "ExperimentID" ];
  string err_msg = 2;
}

// BuildFailed doesn't return a response so BuildFailedResponse is empty.
message BuildFailedResponse {}

// GetBuildJobRequest contains the experiment ID for the desired build job.
message GetBuildJobRequest {
  ExperimentRunID experiment_id = 1 [ (gogoproto.customname) = "ExperimentID" ];
}

// GetBuildJobResponse contains the ExperimentSpec for the corresponding build job.
message GetBuildJobResponse {
  ExperimentSpec spec = 1;
}
