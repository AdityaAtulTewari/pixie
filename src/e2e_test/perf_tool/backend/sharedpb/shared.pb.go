// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/e2e_test/perf_tool/backend/sharedpb/shared.proto

package sharedpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "px.dev/pixie/src/api/proto/uuidpb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExperimentRunID struct {
	UUID     *uuidpb.UUID `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RetryIdx int64        `protobuf:"varint,2,opt,name=retry_idx,json=retryIdx,proto3" json:"retry_idx,omitempty"`
}

func (m *ExperimentRunID) Reset()      { *m = ExperimentRunID{} }
func (*ExperimentRunID) ProtoMessage() {}
func (*ExperimentRunID) Descriptor() ([]byte, []int) {
	return fileDescriptor_36789660ce0408b1, []int{0}
}
func (m *ExperimentRunID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExperimentRunID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExperimentRunID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExperimentRunID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExperimentRunID.Merge(m, src)
}
func (m *ExperimentRunID) XXX_Size() int {
	return m.Size()
}
func (m *ExperimentRunID) XXX_DiscardUnknown() {
	xxx_messageInfo_ExperimentRunID.DiscardUnknown(m)
}

var xxx_messageInfo_ExperimentRunID proto.InternalMessageInfo

func (m *ExperimentRunID) GetUUID() *uuidpb.UUID {
	if m != nil {
		return m.UUID
	}
	return nil
}

func (m *ExperimentRunID) GetRetryIdx() int64 {
	if m != nil {
		return m.RetryIdx
	}
	return 0
}

func init() {
	proto.RegisterType((*ExperimentRunID)(nil), "px.perf_tool.ExperimentRunID")
}

func init() {
	proto.RegisterFile("src/e2e_test/perf_tool/backend/sharedpb/shared.proto", fileDescriptor_36789660ce0408b1)
}

var fileDescriptor_36789660ce0408b1 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x29, 0x2e, 0x4a, 0xd6,
	0x4f, 0x35, 0x4a, 0x8d, 0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2f, 0x48, 0x2d, 0x4a, 0x8b, 0x2f, 0xc9,
	0xcf, 0xcf, 0xd1, 0x4f, 0x4a, 0x4c, 0xce, 0x4e, 0xcd, 0x4b, 0xd1, 0x2f, 0xce, 0x48, 0x2c, 0x4a,
	0x4d, 0x29, 0x48, 0x82, 0x32, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x78, 0x0a, 0x2a, 0xf4,
	0xe0, 0x6a, 0xa5, 0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3,
	0xf3, 0xd3, 0xf3, 0xf5, 0xc1, 0x8a, 0x92, 0x4a, 0xd3, 0xc0, 0x3c, 0x30, 0x07, 0xcc, 0x82, 0x68,
	0x96, 0x92, 0x07, 0x59, 0x99, 0x58, 0x90, 0x09, 0x51, 0xa6, 0x5f, 0x5a, 0x9a, 0x09, 0x32, 0x1f,
	0x44, 0x41, 0x14, 0x28, 0xc5, 0x72, 0xf1, 0xbb, 0x56, 0x14, 0xa4, 0x16, 0x65, 0xe6, 0xa6, 0xe6,
	0x95, 0x04, 0x95, 0xe6, 0x79, 0xba, 0x08, 0xe9, 0x72, 0xb1, 0x80, 0x14, 0x48, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x1b, 0xf1, 0xeb, 0x15, 0x54, 0xe8, 0x41, 0xf4, 0xe9, 0x85, 0x86, 0x7a, 0xba, 0x38,
	0x71, 0x3c, 0xba, 0x27, 0xcf, 0x02, 0x62, 0x05, 0x81, 0x95, 0x09, 0x49, 0x73, 0x71, 0x16, 0xa5,
	0x96, 0x14, 0x55, 0xc6, 0x67, 0xa6, 0x54, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x30, 0x07, 0x71, 0x80,
	0x05, 0x3c, 0x53, 0x2a, 0x9c, 0xec, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e, 0xe1, 0xc3,
	0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x78,
	0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78, 0x24, 0xc7,
	0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x71, 0xc0,
	0x42, 0x22, 0x89, 0x0d, 0xec, 0x4a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x69, 0x9a,
	0xa6, 0x3b, 0x01, 0x00, 0x00,
}

func (this *ExperimentRunID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExperimentRunID)
	if !ok {
		that2, ok := that.(ExperimentRunID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UUID.Equal(that1.UUID) {
		return false
	}
	if this.RetryIdx != that1.RetryIdx {
		return false
	}
	return true
}
func (this *ExperimentRunID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sharedpb.ExperimentRunID{")
	if this.UUID != nil {
		s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	}
	s = append(s, "RetryIdx: "+fmt.Sprintf("%#v", this.RetryIdx)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringShared(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ExperimentRunID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExperimentRunID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExperimentRunID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryIdx != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.RetryIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.UUID != nil {
		{
			size, err := m.UUID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShared(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintShared(dAtA []byte, offset int, v uint64) int {
	offset -= sovShared(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExperimentRunID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UUID != nil {
		l = m.UUID.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	if m.RetryIdx != 0 {
		n += 1 + sovShared(uint64(m.RetryIdx))
	}
	return n
}

func sovShared(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShared(x uint64) (n int) {
	return sovShared(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ExperimentRunID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExperimentRunID{`,
		`UUID:` + strings.Replace(fmt.Sprintf("%v", this.UUID), "UUID", "uuidpb.UUID", 1) + `,`,
		`RetryIdx:` + fmt.Sprintf("%v", this.RetryIdx) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringShared(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ExperimentRunID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExperimentRunID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExperimentRunID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UUID == nil {
				m.UUID = &uuidpb.UUID{}
			}
			if err := m.UUID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryIdx", wireType)
			}
			m.RetryIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShared(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShared
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShared
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShared
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShared
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShared
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShared
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShared        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShared          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShared = fmt.Errorf("proto: unexpected end of group")
)
