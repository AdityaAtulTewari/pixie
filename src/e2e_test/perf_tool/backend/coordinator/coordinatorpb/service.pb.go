// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/e2e_test/perf_tool/backend/coordinator/coordinatorpb/service.proto

package coordinatorpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "px.dev/pixie/src/api/proto/uuidpb"
	sharedpb "px.dev/pixie/src/e2e_test/perf_tool/backend/sharedpb"
	experimentpb "px.dev/pixie/src/e2e_test/perf_tool/experimentpb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueueExperimentRequest struct {
	Spec *experimentpb.ExperimentSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *QueueExperimentRequest) Reset()      { *m = QueueExperimentRequest{} }
func (*QueueExperimentRequest) ProtoMessage() {}
func (*QueueExperimentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fc45c3774fcd229, []int{0}
}
func (m *QueueExperimentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueExperimentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueExperimentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueExperimentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueExperimentRequest.Merge(m, src)
}
func (m *QueueExperimentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueueExperimentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueExperimentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueueExperimentRequest proto.InternalMessageInfo

func (m *QueueExperimentRequest) GetSpec() *experimentpb.ExperimentSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type QueueExperimentResponse struct {
	ExperimentID *uuidpb.UUID `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (m *QueueExperimentResponse) Reset()      { *m = QueueExperimentResponse{} }
func (*QueueExperimentResponse) ProtoMessage() {}
func (*QueueExperimentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fc45c3774fcd229, []int{1}
}
func (m *QueueExperimentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueExperimentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueExperimentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueExperimentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueExperimentResponse.Merge(m, src)
}
func (m *QueueExperimentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueueExperimentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueExperimentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueueExperimentResponse proto.InternalMessageInfo

func (m *QueueExperimentResponse) GetExperimentID() *uuidpb.UUID {
	if m != nil {
		return m.ExperimentID
	}
	return nil
}

type TaskCompleteRequest struct {
	ID  *sharedpb.ExperimentRunID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Err *Error                    `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *TaskCompleteRequest) Reset()      { *m = TaskCompleteRequest{} }
func (*TaskCompleteRequest) ProtoMessage() {}
func (*TaskCompleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fc45c3774fcd229, []int{2}
}
func (m *TaskCompleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskCompleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskCompleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskCompleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskCompleteRequest.Merge(m, src)
}
func (m *TaskCompleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *TaskCompleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskCompleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskCompleteRequest proto.InternalMessageInfo

func (m *TaskCompleteRequest) GetID() *sharedpb.ExperimentRunID {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *TaskCompleteRequest) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

type TaskCompleteResponse struct {
}

func (m *TaskCompleteResponse) Reset()      { *m = TaskCompleteResponse{} }
func (*TaskCompleteResponse) ProtoMessage() {}
func (*TaskCompleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fc45c3774fcd229, []int{3}
}
func (m *TaskCompleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskCompleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskCompleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskCompleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskCompleteResponse.Merge(m, src)
}
func (m *TaskCompleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *TaskCompleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskCompleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskCompleteResponse proto.InternalMessageInfo

type Error struct {
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Error) Reset()      { *m = Error{} }
func (*Error) ProtoMessage() {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fc45c3774fcd229, []int{4}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*QueueExperimentRequest)(nil), "px.perf_tool.QueueExperimentRequest")
	proto.RegisterType((*QueueExperimentResponse)(nil), "px.perf_tool.QueueExperimentResponse")
	proto.RegisterType((*TaskCompleteRequest)(nil), "px.perf_tool.TaskCompleteRequest")
	proto.RegisterType((*TaskCompleteResponse)(nil), "px.perf_tool.TaskCompleteResponse")
	proto.RegisterType((*Error)(nil), "px.perf_tool.Error")
}

func init() {
	proto.RegisterFile("src/e2e_test/perf_tool/backend/coordinator/coordinatorpb/service.proto", fileDescriptor_4fc45c3774fcd229)
}

var fileDescriptor_4fc45c3774fcd229 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0xb6, 0x53, 0xa8, 0xc4, 0x90, 0xaa, 0xc5, 0x41, 0x25, 0x8d, 0xca, 0x04, 0x2c, 0x2a, 0xb1,
	0xc1, 0x46, 0x01, 0x2e, 0x90, 0x84, 0x4a, 0x61, 0x81, 0xc0, 0xa5, 0x9b, 0x0a, 0x11, 0xf9, 0xe7,
	0x25, 0x1d, 0x35, 0xf1, 0x0c, 0xf3, 0x03, 0x61, 0x87, 0xc4, 0x05, 0x38, 0x06, 0x47, 0x61, 0x99,
	0x65, 0x57, 0x15, 0x71, 0x36, 0x2c, 0x7b, 0x04, 0x94, 0x99, 0x24, 0x4e, 0x4a, 0xda, 0x6e, 0xba,
	0xf2, 0x7b, 0xf6, 0xf7, 0xf7, 0x9e, 0xc7, 0x46, 0xfb, 0x82, 0xc7, 0x3e, 0xd4, 0xa0, 0x2d, 0x41,
	0x48, 0x9f, 0x01, 0xef, 0xb4, 0x25, 0xa5, 0x3d, 0x3f, 0x0a, 0xe3, 0x13, 0x48, 0x13, 0x3f, 0xa6,
	0x94, 0x27, 0x24, 0x0d, 0x25, 0xe5, 0x8b, 0x35, 0x8b, 0x7c, 0x01, 0xfc, 0x0b, 0x89, 0xc1, 0x63,
	0x9c, 0x4a, 0xea, 0x14, 0xd9, 0xc0, 0x9b, 0xb3, 0x2b, 0xcf, 0xba, 0x44, 0x1e, 0xab, 0xc8, 0x8b,
	0x69, 0xdf, 0xef, 0xd2, 0x2e, 0xf5, 0x35, 0x28, 0x52, 0x1d, 0xdd, 0xe9, 0x46, 0x57, 0x86, 0x5c,
	0xa9, 0x4e, 0x42, 0x84, 0x8c, 0x18, 0x98, 0xaf, 0x14, 0x49, 0x58, 0xa4, 0x2f, 0x53, 0xc0, 0xcb,
	0x4b, 0x52, 0xc2, 0x80, 0x01, 0x27, 0x7d, 0x48, 0x25, 0x8b, 0x16, 0x9a, 0x6b, 0x58, 0xb3, 0xd9,
	0xc4, 0x71, 0xc8, 0x61, 0xe2, 0x64, 0x0a, 0xc3, 0x72, 0xdf, 0xa0, 0xed, 0xf7, 0x0a, 0x14, 0xbc,
	0x9e, 0xcb, 0x05, 0xf0, 0x59, 0x81, 0x90, 0xce, 0x73, 0x74, 0x4b, 0x30, 0x88, 0xcb, 0xf6, 0x23,
	0xfb, 0xe9, 0xdd, 0xda, 0xae, 0xb7, 0x38, 0xb2, 0x97, 0xc3, 0x0f, 0x18, 0xc4, 0x81, 0x46, 0xba,
	0x21, 0x7a, 0xf0, 0x9f, 0x96, 0x60, 0x34, 0x15, 0xe0, 0xec, 0xa3, 0x8d, 0x3c, 0x70, 0x9b, 0x24,
	0x53, 0xd5, 0xcd, 0x89, 0xaa, 0x59, 0x80, 0x77, 0x78, 0xd8, 0x6a, 0xd6, 0xb7, 0xb2, 0xb3, 0x6a,
	0x31, 0xe7, 0xb7, 0x9a, 0x41, 0x31, 0xe7, 0xb5, 0x12, 0x57, 0xa0, 0xd2, 0x87, 0x50, 0x9c, 0x34,
	0x68, 0x9f, 0xf5, 0x40, 0xc2, 0x2c, 0xeb, 0x2b, 0x54, 0x98, 0x6b, 0x3e, 0xbc, 0x2c, 0x69, 0xa0,
	0xd2, 0x56, 0xb3, 0xbe, 0x9e, 0x9d, 0x55, 0x0b, 0xad, 0x66, 0x50, 0x20, 0x89, 0xb3, 0x87, 0xd6,
	0x80, 0xf3, 0x72, 0x41, 0xf3, 0x4a, 0x17, 0x78, 0x9c, 0x53, 0x1e, 0x4c, 0x9e, 0xbb, 0xdb, 0xe8,
	0xfe, 0xb2, 0xa9, 0x19, 0xca, 0xdd, 0x41, 0xb7, 0x35, 0xca, 0xd9, 0x42, 0x6b, 0x7d, 0xd1, 0xd5,
	0xfe, 0x77, 0x82, 0x49, 0x59, 0x93, 0xc8, 0x69, 0xe4, 0xe7, 0xe7, 0xc0, 0x1c, 0x1e, 0xe7, 0x13,
	0xda, 0xbc, 0xb0, 0x20, 0xe7, 0xc9, 0xb2, 0xeb, 0xea, 0x77, 0x51, 0xd9, 0xbb, 0x06, 0x65, 0x02,
	0xd5, 0x06, 0xa8, 0x5c, 0x57, 0xa4, 0x97, 0xbc, 0xa5, 0x92, 0x74, 0x48, 0x1c, 0x4a, 0x42, 0xd3,
	0x99, 0xf7, 0x47, 0x54, 0xd2, 0xb7, 0xbf, 0x69, 0xc4, 0x6c, 0x16, 0xe7, 0xf1, 0xb2, 0xf2, 0x8a,
	0xe5, 0x56, 0xdc, 0xab, 0x20, 0x53, 0xe7, 0x1f, 0x36, 0xaa, 0x34, 0x7a, 0x4a, 0x48, 0xe0, 0xab,
	0xcc, 0x01, 0xed, 0x1a, 0xf3, 0x77, 0x1c, 0x58, 0xc8, 0x61, 0x0a, 0xbd, 0xe9, 0x14, 0x5f, 0xd1,
	0x4e, 0xa0, 0xd2, 0x74, 0x75, 0x86, 0x23, 0x74, 0xcf, 0x64, 0x08, 0x54, 0x7a, 0xc3, 0xc6, 0xf5,
	0xc6, 0x70, 0x84, 0xad, 0xd3, 0x11, 0xb6, 0xce, 0x47, 0xd8, 0xfe, 0x9e, 0x61, 0xfb, 0x57, 0x86,
	0xed, 0xdf, 0x19, 0xb6, 0x87, 0x19, 0xb6, 0xff, 0x64, 0xd8, 0xfe, 0x9b, 0x61, 0xeb, 0x3c, 0xc3,
	0xf6, 0xcf, 0x31, 0xb6, 0x86, 0x63, 0x6c, 0x9d, 0x8e, 0xb1, 0x75, 0xb4, 0xb1, 0xf4, 0x8b, 0x89,
	0xd6, 0xf5, 0x17, 0xf9, 0xe2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x10, 0x10, 0x95, 0xa5,
	0x04, 0x00, 0x00,
}

func (this *QueueExperimentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueueExperimentRequest)
	if !ok {
		that2, ok := that.(QueueExperimentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *QueueExperimentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueueExperimentResponse)
	if !ok {
		that2, ok := that.(QueueExperimentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExperimentID.Equal(that1.ExperimentID) {
		return false
	}
	return true
}
func (this *TaskCompleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskCompleteRequest)
	if !ok {
		that2, ok := that.(TaskCompleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.Err.Equal(that1.Err) {
		return false
	}
	return true
}
func (this *TaskCompleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskCompleteResponse)
	if !ok {
		that2, ok := that.(TaskCompleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *QueueExperimentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coordinatorpb.QueueExperimentRequest{")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueueExperimentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coordinatorpb.QueueExperimentResponse{")
	if this.ExperimentID != nil {
		s = append(s, "ExperimentID: "+fmt.Sprintf("%#v", this.ExperimentID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskCompleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&coordinatorpb.TaskCompleteRequest{")
	if this.ID != nil {
		s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	}
	if this.Err != nil {
		s = append(s, "Err: "+fmt.Sprintf("%#v", this.Err)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskCompleteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&coordinatorpb.TaskCompleteResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&coordinatorpb.Error{")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoordinatorServiceClient is the client API for CoordinatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoordinatorServiceClient interface {
	QueueExperiment(ctx context.Context, in *QueueExperimentRequest, opts ...grpc.CallOption) (*QueueExperimentResponse, error)
}

type coordinatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoordinatorServiceClient(cc *grpc.ClientConn) CoordinatorServiceClient {
	return &coordinatorServiceClient{cc}
}

func (c *coordinatorServiceClient) QueueExperiment(ctx context.Context, in *QueueExperimentRequest, opts ...grpc.CallOption) (*QueueExperimentResponse, error) {
	out := new(QueueExperimentResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.CoordinatorService/QueueExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServiceServer is the server API for CoordinatorService service.
type CoordinatorServiceServer interface {
	QueueExperiment(context.Context, *QueueExperimentRequest) (*QueueExperimentResponse, error)
}

// UnimplementedCoordinatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServiceServer struct {
}

func (*UnimplementedCoordinatorServiceServer) QueueExperiment(ctx context.Context, req *QueueExperimentRequest) (*QueueExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueExperiment not implemented")
}

func RegisterCoordinatorServiceServer(s *grpc.Server, srv CoordinatorServiceServer) {
	s.RegisterService(&_CoordinatorService_serviceDesc, srv)
}

func _CoordinatorService_QueueExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).QueueExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.CoordinatorService/QueueExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).QueueExperiment(ctx, req.(*QueueExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoordinatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.perf_tool.CoordinatorService",
	HandlerType: (*CoordinatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueExperiment",
			Handler:    _CoordinatorService_QueueExperiment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/e2e_test/perf_tool/backend/coordinator/coordinatorpb/service.proto",
}

// BuildNotificationServiceClient is the client API for BuildNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuildNotificationServiceClient interface {
	NotifyBuildComplete(ctx context.Context, in *TaskCompleteRequest, opts ...grpc.CallOption) (*TaskCompleteResponse, error)
}

type buildNotificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewBuildNotificationServiceClient(cc *grpc.ClientConn) BuildNotificationServiceClient {
	return &buildNotificationServiceClient{cc}
}

func (c *buildNotificationServiceClient) NotifyBuildComplete(ctx context.Context, in *TaskCompleteRequest, opts ...grpc.CallOption) (*TaskCompleteResponse, error) {
	out := new(TaskCompleteResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.BuildNotificationService/NotifyBuildComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildNotificationServiceServer is the server API for BuildNotificationService service.
type BuildNotificationServiceServer interface {
	NotifyBuildComplete(context.Context, *TaskCompleteRequest) (*TaskCompleteResponse, error)
}

// UnimplementedBuildNotificationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBuildNotificationServiceServer struct {
}

func (*UnimplementedBuildNotificationServiceServer) NotifyBuildComplete(ctx context.Context, req *TaskCompleteRequest) (*TaskCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBuildComplete not implemented")
}

func RegisterBuildNotificationServiceServer(s *grpc.Server, srv BuildNotificationServiceServer) {
	s.RegisterService(&_BuildNotificationService_serviceDesc, srv)
}

func _BuildNotificationService_NotifyBuildComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildNotificationServiceServer).NotifyBuildComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.BuildNotificationService/NotifyBuildComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildNotificationServiceServer).NotifyBuildComplete(ctx, req.(*TaskCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuildNotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.perf_tool.BuildNotificationService",
	HandlerType: (*BuildNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyBuildComplete",
			Handler:    _BuildNotificationService_NotifyBuildComplete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/e2e_test/perf_tool/backend/coordinator/coordinatorpb/service.proto",
}

// ClusterNotificationServiceClient is the client API for ClusterNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterNotificationServiceClient interface {
	NotifyPrepareClusterComplete(ctx context.Context, in *TaskCompleteRequest, opts ...grpc.CallOption) (*TaskCompleteResponse, error)
}

type clusterNotificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterNotificationServiceClient(cc *grpc.ClientConn) ClusterNotificationServiceClient {
	return &clusterNotificationServiceClient{cc}
}

func (c *clusterNotificationServiceClient) NotifyPrepareClusterComplete(ctx context.Context, in *TaskCompleteRequest, opts ...grpc.CallOption) (*TaskCompleteResponse, error) {
	out := new(TaskCompleteResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.ClusterNotificationService/NotifyPrepareClusterComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterNotificationServiceServer is the server API for ClusterNotificationService service.
type ClusterNotificationServiceServer interface {
	NotifyPrepareClusterComplete(context.Context, *TaskCompleteRequest) (*TaskCompleteResponse, error)
}

// UnimplementedClusterNotificationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClusterNotificationServiceServer struct {
}

func (*UnimplementedClusterNotificationServiceServer) NotifyPrepareClusterComplete(ctx context.Context, req *TaskCompleteRequest) (*TaskCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPrepareClusterComplete not implemented")
}

func RegisterClusterNotificationServiceServer(s *grpc.Server, srv ClusterNotificationServiceServer) {
	s.RegisterService(&_ClusterNotificationService_serviceDesc, srv)
}

func _ClusterNotificationService_NotifyPrepareClusterComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterNotificationServiceServer).NotifyPrepareClusterComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.ClusterNotificationService/NotifyPrepareClusterComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterNotificationServiceServer).NotifyPrepareClusterComplete(ctx, req.(*TaskCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterNotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.perf_tool.ClusterNotificationService",
	HandlerType: (*ClusterNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyPrepareClusterComplete",
			Handler:    _ClusterNotificationService_NotifyPrepareClusterComplete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/e2e_test/perf_tool/backend/coordinator/coordinatorpb/service.proto",
}

// RunnerNotificationServiceClient is the client API for RunnerNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunnerNotificationServiceClient interface {
	NotifyRunComplete(ctx context.Context, in *TaskCompleteRequest, opts ...grpc.CallOption) (*TaskCompleteResponse, error)
}

type runnerNotificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewRunnerNotificationServiceClient(cc *grpc.ClientConn) RunnerNotificationServiceClient {
	return &runnerNotificationServiceClient{cc}
}

func (c *runnerNotificationServiceClient) NotifyRunComplete(ctx context.Context, in *TaskCompleteRequest, opts ...grpc.CallOption) (*TaskCompleteResponse, error) {
	out := new(TaskCompleteResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.RunnerNotificationService/NotifyRunComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerNotificationServiceServer is the server API for RunnerNotificationService service.
type RunnerNotificationServiceServer interface {
	NotifyRunComplete(context.Context, *TaskCompleteRequest) (*TaskCompleteResponse, error)
}

// UnimplementedRunnerNotificationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRunnerNotificationServiceServer struct {
}

func (*UnimplementedRunnerNotificationServiceServer) NotifyRunComplete(ctx context.Context, req *TaskCompleteRequest) (*TaskCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRunComplete not implemented")
}

func RegisterRunnerNotificationServiceServer(s *grpc.Server, srv RunnerNotificationServiceServer) {
	s.RegisterService(&_RunnerNotificationService_serviceDesc, srv)
}

func _RunnerNotificationService_NotifyRunComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerNotificationServiceServer).NotifyRunComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.RunnerNotificationService/NotifyRunComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerNotificationServiceServer).NotifyRunComplete(ctx, req.(*TaskCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunnerNotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.perf_tool.RunnerNotificationService",
	HandlerType: (*RunnerNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyRunComplete",
			Handler:    _RunnerNotificationService_NotifyRunComplete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/e2e_test/perf_tool/backend/coordinator/coordinatorpb/service.proto",
}

func (m *QueueExperimentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueExperimentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueExperimentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueueExperimentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueExperimentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueExperimentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExperimentID != nil {
		{
			size, err := m.ExperimentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskCompleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskCompleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskCompleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		{
			size, err := m.Err.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskCompleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskCompleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskCompleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintService(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueueExperimentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *QueueExperimentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExperimentID != nil {
		l = m.ExperimentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *TaskCompleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *TaskCompleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueueExperimentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueExperimentRequest{`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ExperimentSpec", "experimentpb.ExperimentSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueueExperimentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueExperimentResponse{`,
		`ExperimentID:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskCompleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskCompleteRequest{`,
		`ID:` + strings.Replace(fmt.Sprintf("%v", this.ID), "ExperimentRunID", "sharedpb.ExperimentRunID", 1) + `,`,
		`Err:` + strings.Replace(this.Err.String(), "Error", "Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskCompleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskCompleteResponse{`,
		`}`,
	}, "")
	return s
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueueExperimentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueExperimentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueExperimentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &experimentpb.ExperimentSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueExperimentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueExperimentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueExperimentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentID == nil {
				m.ExperimentID = &uuidpb.UUID{}
			}
			if err := m.ExperimentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskCompleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskCompleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskCompleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &sharedpb.ExperimentRunID{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &Error{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskCompleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskCompleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskCompleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
