/*
 * Copyright 2018- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package px.perf_tool;

option go_package = "coordinatorpb";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/api/proto/uuidpb/uuid.proto";
import "src/e2e_test/perf_tool/experimentpb/experiment.proto";
import "src/e2e_test/perf_tool/backend/sharedpb/shared.proto";

// CoordinatorService provides external facing RPCs for controlling execution of experiments.
service CoordinatorService {
  // Queue an Experiment spec for running.
  rpc QueueExperiment(QueueExperimentRequest) returns (QueueExperimentResponse);
}

// BuildNotificationService provides RPCs for the builder service to notify the coordinator about
// the status of its builds.
service BuildNotificationService {
  // NotifyBuildComplete notifies the coordinator that a build has finished (successfully or not).
  rpc NotifyBuildComplete(TaskCompleteRequest) returns (TaskCompleteResponse);
}

// ClusterNotifactionService provides RPCs for the clustermgr service to notify the coordinator
// about the status of its cluster assignments.
service ClusterNotificationService {
  // NotifyPrepareClusterComplete notifies the coordinator that a cluster has been prepared and
  // assigned to the given experiment.
  rpc NotifyPrepareClusterComplete(TaskCompleteRequest) returns (TaskCompleteResponse);
}

// RunnerNotificationService provides RPCs for the runner to notify the coordinator about the status
// of running experiments.
service RunnerNotificationService {
  // NotifyRunComplete notifies the coordinator that an experiment has completed execution (whether
  // successful or not).
  rpc NotifyRunComplete(TaskCompleteRequest) returns (TaskCompleteResponse);
}

// QueueExperimentRequest tells the coordinator to add an experiment to the queue with the given
// spec.
message QueueExperimentRequest {
  ExperimentSpec spec = 1;
}

// QueueExperimentResponse returns the unique ID assigned to the queued experiment.
message QueueExperimentResponse {
  px.uuidpb.UUID experiment_id = 1 [ (gogoproto.customname) = "ExperimentID" ];
}

// TaskCompleteRequest is a shared message used by all Notify(.*)Complete RPCs.
// If err is set, it means the task failed, otherwise it signifies a successful completion of the
// task.
message TaskCompleteRequest {
  ExperimentRunID id = 1 [ (gogoproto.customname) = "ID" ];
  Error err = 2;
}

// TaskCompleteResponse is shared by all Notify(.*)Complete RPCs.
// Since the notifications are unidirectional, the response is empty.
message TaskCompleteResponse {}

// Error wraps an error message.
message Error {
  string msg = 1;
}
