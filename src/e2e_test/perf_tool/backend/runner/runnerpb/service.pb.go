// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/e2e_test/perf_tool/backend/runner/runnerpb/service.proto

package runnerpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	sharedpb "px.dev/pixie/src/e2e_test/perf_tool/backend/sharedpb"
	experimentpb "px.dev/pixie/src/e2e_test/perf_tool/experimentpb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StartExperimentRequest struct {
	ExperimentID *sharedpb.ExperimentRunID    `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	Spec         *experimentpb.ExperimentSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *StartExperimentRequest) Reset()      { *m = StartExperimentRequest{} }
func (*StartExperimentRequest) ProtoMessage() {}
func (*StartExperimentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c339bbc3dc2160c, []int{0}
}
func (m *StartExperimentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartExperimentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartExperimentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartExperimentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartExperimentRequest.Merge(m, src)
}
func (m *StartExperimentRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartExperimentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartExperimentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartExperimentRequest proto.InternalMessageInfo

func (m *StartExperimentRequest) GetExperimentID() *sharedpb.ExperimentRunID {
	if m != nil {
		return m.ExperimentID
	}
	return nil
}

func (m *StartExperimentRequest) GetSpec() *experimentpb.ExperimentSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type StartExperimentResponse struct {
}

func (m *StartExperimentResponse) Reset()      { *m = StartExperimentResponse{} }
func (*StartExperimentResponse) ProtoMessage() {}
func (*StartExperimentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c339bbc3dc2160c, []int{1}
}
func (m *StartExperimentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartExperimentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartExperimentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartExperimentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartExperimentResponse.Merge(m, src)
}
func (m *StartExperimentResponse) XXX_Size() int {
	return m.Size()
}
func (m *StartExperimentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartExperimentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartExperimentResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StartExperimentRequest)(nil), "px.perf_tool.StartExperimentRequest")
	proto.RegisterType((*StartExperimentResponse)(nil), "px.perf_tool.StartExperimentResponse")
}

func init() {
	proto.RegisterFile("src/e2e_test/perf_tool/backend/runner/runnerpb/service.proto", fileDescriptor_0c339bbc3dc2160c)
}

var fileDescriptor_0c339bbc3dc2160c = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xbd, 0x4e, 0x2a, 0x41,
	0x14, 0xde, 0xb9, 0xb9, 0xb9, 0xb9, 0x19, 0x21, 0x9a, 0x2d, 0x14, 0x89, 0x1e, 0x0d, 0xd1, 0xc4,
	0xc6, 0x1d, 0x83, 0x96, 0xc6, 0x82, 0x60, 0x41, 0xbb, 0x58, 0x59, 0x48, 0xd8, 0xdd, 0x03, 0x6c,
	0x94, 0x9d, 0x71, 0x66, 0xd6, 0x50, 0xfa, 0x08, 0x3e, 0x82, 0xa5, 0x8f, 0x62, 0x49, 0x49, 0x65,
	0x64, 0x68, 0x2c, 0x79, 0x04, 0xe3, 0xac, 0xfc, 0xf8, 0x43, 0xa8, 0xe6, 0x9c, 0xc9, 0xf7, 0x77,
	0xce, 0x0c, 0x3d, 0x55, 0x32, 0x64, 0x58, 0xc6, 0x86, 0x46, 0xa5, 0x99, 0x40, 0xd9, 0x6a, 0x68,
	0xce, 0x6f, 0x58, 0xd0, 0x0c, 0xaf, 0x31, 0x89, 0x98, 0x4c, 0x93, 0x04, 0xe5, 0xe7, 0x21, 0x02,
	0xa6, 0x50, 0xde, 0xc5, 0x21, 0x7a, 0x42, 0x72, 0xcd, 0xdd, 0x9c, 0xe8, 0x79, 0x53, 0x4e, 0xf1,
	0xb0, 0x1d, 0xeb, 0x4e, 0x1a, 0x78, 0x21, 0xef, 0xb2, 0x36, 0x6f, 0x73, 0x66, 0x41, 0x41, 0xda,
	0xb2, 0x9d, 0x6d, 0x6c, 0x95, 0x91, 0x8b, 0x27, 0x0b, 0xac, 0xb1, 0x27, 0x50, 0xc6, 0x5d, 0x4c,
	0xb4, 0x08, 0xe6, 0x9a, 0x25, 0xac, 0x49, 0x60, 0xd5, 0x69, 0x4a, 0x8c, 0x3e, 0x92, 0xda, 0x22,
	0x63, 0x95, 0x1e, 0x09, 0x5d, 0xaf, 0xeb, 0xa6, 0xd4, 0xe7, 0x53, 0x3d, 0x1f, 0x6f, 0x53, 0x54,
	0xda, 0xbd, 0xa0, 0xf9, 0x99, 0x49, 0x23, 0x8e, 0x0a, 0x64, 0x97, 0x1c, 0xac, 0x94, 0xb7, 0xbd,
	0xf9, 0xd9, 0xbc, 0x39, 0x5e, 0x9a, 0xd4, 0xaa, 0x95, 0x35, 0xf3, 0xb2, 0x93, 0x9b, 0x5d, 0xd6,
	0xaa, 0x7e, 0x6e, 0xa6, 0x52, 0x8b, 0xdc, 0x23, 0xfa, 0x57, 0x09, 0x0c, 0x0b, 0x7f, 0xac, 0xd8,
	0xd6, 0x22, 0xb1, 0xba, 0xc0, 0xd0, 0xb7, 0xc8, 0xd2, 0x26, 0xdd, 0xf8, 0x91, 0x50, 0x09, 0x9e,
	0x28, 0x2c, 0x73, 0x9a, 0xf7, 0xed, 0x03, 0xd4, 0xb3, 0xed, 0xbb, 0x57, 0x74, 0xf5, 0x1b, 0xd6,
	0xdd, 0xfb, 0x6a, 0xf1, 0xfb, 0xb0, 0xc5, 0xfd, 0x25, 0xa8, 0xcc, 0xb0, 0x72, 0xd6, 0x1f, 0x82,
	0x33, 0x18, 0x82, 0x33, 0x1e, 0x02, 0xb9, 0x37, 0x40, 0x9e, 0x0c, 0x90, 0x67, 0x03, 0xa4, 0x6f,
	0x80, 0xbc, 0x1a, 0x20, 0x6f, 0x06, 0x9c, 0xb1, 0x01, 0xf2, 0x30, 0x02, 0xa7, 0x3f, 0x02, 0x67,
	0x30, 0x02, 0xe7, 0xf2, 0xff, 0xe4, 0x97, 0x04, 0xff, 0xec, 0xd6, 0x8f, 0xdf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x73, 0x9a, 0x9f, 0xc5, 0x5e, 0x02, 0x00, 0x00,
}

func (this *StartExperimentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartExperimentRequest)
	if !ok {
		that2, ok := that.(StartExperimentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExperimentID.Equal(that1.ExperimentID) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *StartExperimentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartExperimentResponse)
	if !ok {
		that2, ok := that.(StartExperimentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StartExperimentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&runnerpb.StartExperimentRequest{")
	if this.ExperimentID != nil {
		s = append(s, "ExperimentID: "+fmt.Sprintf("%#v", this.ExperimentID)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartExperimentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&runnerpb.StartExperimentResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunnerServiceClient is the client API for RunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunnerServiceClient interface {
	StartExperiment(ctx context.Context, in *StartExperimentRequest, opts ...grpc.CallOption) (*StartExperimentResponse, error)
}

type runnerServiceClient struct {
	cc *grpc.ClientConn
}

func NewRunnerServiceClient(cc *grpc.ClientConn) RunnerServiceClient {
	return &runnerServiceClient{cc}
}

func (c *runnerServiceClient) StartExperiment(ctx context.Context, in *StartExperimentRequest, opts ...grpc.CallOption) (*StartExperimentResponse, error) {
	out := new(StartExperimentResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.RunnerService/StartExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServiceServer is the server API for RunnerService service.
type RunnerServiceServer interface {
	StartExperiment(context.Context, *StartExperimentRequest) (*StartExperimentResponse, error)
}

// UnimplementedRunnerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRunnerServiceServer struct {
}

func (*UnimplementedRunnerServiceServer) StartExperiment(ctx context.Context, req *StartExperimentRequest) (*StartExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExperiment not implemented")
}

func RegisterRunnerServiceServer(s *grpc.Server, srv RunnerServiceServer) {
	s.RegisterService(&_RunnerService_serviceDesc, srv)
}

func _RunnerService_StartExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServiceServer).StartExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.RunnerService/StartExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServiceServer).StartExperiment(ctx, req.(*StartExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunnerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.perf_tool.RunnerService",
	HandlerType: (*RunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartExperiment",
			Handler:    _RunnerService_StartExperiment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/e2e_test/perf_tool/backend/runner/runnerpb/service.proto",
}

func (m *StartExperimentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartExperimentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartExperimentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExperimentID != nil {
		{
			size, err := m.ExperimentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartExperimentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartExperimentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartExperimentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StartExperimentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExperimentID != nil {
		l = m.ExperimentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *StartExperimentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StartExperimentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartExperimentRequest{`,
		`ExperimentID:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentID), "ExperimentRunID", "sharedpb.ExperimentRunID", 1) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ExperimentSpec", "experimentpb.ExperimentSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartExperimentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartExperimentResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StartExperimentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartExperimentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartExperimentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentID == nil {
				m.ExperimentID = &sharedpb.ExperimentRunID{}
			}
			if err := m.ExperimentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &experimentpb.ExperimentSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartExperimentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartExperimentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartExperimentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
