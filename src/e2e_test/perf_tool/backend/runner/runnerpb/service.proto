/*
 * Copyright 2018- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package px.perf_tool;

option go_package = "runnerpb";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/e2e_test/perf_tool/experimentpb/experiment.proto";
import "src/e2e_test/perf_tool/backend/sharedpb/shared.proto";

// RunnerService provides RPCs for starting execution of experiments.
service RunnerService {
  // StartExperiment starts the execution of an experiment.
  // StartExperiment expects that a cluster has already been assigned to the experiment, and the
  // experiment has already been built. StartExperiment launches the experiment and then returns.
  // The experiment then finishes asynchronously.
  rpc StartExperiment(StartExperimentRequest) returns (StartExperimentResponse);
}

// StartExperimentRequest contains the experiment ID of the experiment to run, and its spec.
message StartExperimentRequest {
  ExperimentRunID experiment_id = 1 [ (gogoproto.customname) = "ExperimentID" ];
  ExperimentSpec spec = 2;
}

// StartExperiment doesn't return anything so StartExperimentResponse is empty.
message StartExperimentResponse {}
