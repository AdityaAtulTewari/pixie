/*
 * Copyright 2018- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package px.perf_tool;

option go_package = "clustermgrpb";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "src/api/proto/uuidpb/uuid.proto";
import "src/e2e_test/perf_tool/experimentpb/experiment.proto";
import "src/e2e_test/perf_tool/backend/sharedpb/shared.proto";

// ClusterManagerService provides RPCs for controlling assignment of k8s clusters, and RPCs for
// getting information about said clusters.
service ClusterManagerService {
  // PrepareCluster queues a request to prepare a cluster according to the provided specification.
  // Asynchronously the request will be processed and the prepared cluster will be assigned to the
  // given experiment until a subsequent call to ReturnCluster.
  rpc PrepareCluster(PrepareClusterRequest) returns (PrepareClusterResponse);
  // ReturnCluster is called when an experiment no longer needs a cluster (i.e. the experiment
  // finished or failed). This RPC leads to the cluster being unassigned and available for other
  // prepare cluster requests.
  rpc ReturnCluster(ReturnClusterRequest) returns (ReturnClusterResponse);
  // GetClusterInfo returns authentication and other information about the cluster assigned to the
  // given experiment.
  rpc GetClusterInfo(GetClusterInfoRequest) returns (ClusterInfo);
}

// PrepareClusterRequest specifies the cluster spec required for a given experiment.
// This request is handled asynchronously by the clustermgr.
message PrepareClusterRequest {
  ExperimentRunID experiment_id = 1 [ (gogoproto.customname) = "ExperimentID" ];
  ClusterSpec cluster_spec = 2;
}

// PrepareClusterResponse is empty, because the PrepareCluster RPC only queues a prepare request
// which is then handled asynchronously.
message PrepareClusterResponse {}

// ReturnClusterRequest tells the clustermgr to unassign the cluster currently assigned to the given
// experiment.
message ReturnClusterRequest {
  ExperimentRunID experiment_id = 1 [ (gogoproto.customname) = "ExperimentID" ];
}

// ReturnClusterResponse is empty.
message ReturnClusterResponse {}

// GetClusterInfoRequest asks the clustermgr for information about the cluster assigned to the
// provided experiment.
message GetClusterInfoRequest {
  ExperimentRunID experiment_id = 1 [ (gogoproto.customname) = "ExperimentID" ];
}

// ClusterInfo is the information about a cluster returned by GetClusterInfo.
// This currently includes a kubeconfig file, for authenticating to a cluster, as well as the Pixie
// cluster ID for the cluster, used for accessing the cluster via the px CLI.
message ClusterInfo {
  bytes kubeconfig = 1;
  px.uuidpb.UUID pixie_cluster_id = 2 [ (gogoproto.customname) = "PixieClusterID" ];
}
