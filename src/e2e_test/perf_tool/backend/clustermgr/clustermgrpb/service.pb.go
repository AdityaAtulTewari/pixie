// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/e2e_test/perf_tool/backend/clustermgr/clustermgrpb/service.proto

package clustermgrpb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	uuidpb "px.dev/pixie/src/api/proto/uuidpb"
	sharedpb "px.dev/pixie/src/e2e_test/perf_tool/backend/sharedpb"
	experimentpb "px.dev/pixie/src/e2e_test/perf_tool/experimentpb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrepareClusterRequest struct {
	ExperimentID *sharedpb.ExperimentRunID `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	ClusterSpec  *experimentpb.ClusterSpec `protobuf:"bytes,2,opt,name=cluster_spec,json=clusterSpec,proto3" json:"cluster_spec,omitempty"`
}

func (m *PrepareClusterRequest) Reset()      { *m = PrepareClusterRequest{} }
func (*PrepareClusterRequest) ProtoMessage() {}
func (*PrepareClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6d23681472c66fc, []int{0}
}
func (m *PrepareClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareClusterRequest.Merge(m, src)
}
func (m *PrepareClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrepareClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareClusterRequest proto.InternalMessageInfo

func (m *PrepareClusterRequest) GetExperimentID() *sharedpb.ExperimentRunID {
	if m != nil {
		return m.ExperimentID
	}
	return nil
}

func (m *PrepareClusterRequest) GetClusterSpec() *experimentpb.ClusterSpec {
	if m != nil {
		return m.ClusterSpec
	}
	return nil
}

type PrepareClusterResponse struct {
}

func (m *PrepareClusterResponse) Reset()      { *m = PrepareClusterResponse{} }
func (*PrepareClusterResponse) ProtoMessage() {}
func (*PrepareClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6d23681472c66fc, []int{1}
}
func (m *PrepareClusterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrepareClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrepareClusterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrepareClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrepareClusterResponse.Merge(m, src)
}
func (m *PrepareClusterResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrepareClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrepareClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareClusterResponse proto.InternalMessageInfo

type ReturnClusterRequest struct {
	ExperimentID *sharedpb.ExperimentRunID `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (m *ReturnClusterRequest) Reset()      { *m = ReturnClusterRequest{} }
func (*ReturnClusterRequest) ProtoMessage() {}
func (*ReturnClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6d23681472c66fc, []int{2}
}
func (m *ReturnClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReturnClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReturnClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReturnClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReturnClusterRequest.Merge(m, src)
}
func (m *ReturnClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReturnClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReturnClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReturnClusterRequest proto.InternalMessageInfo

func (m *ReturnClusterRequest) GetExperimentID() *sharedpb.ExperimentRunID {
	if m != nil {
		return m.ExperimentID
	}
	return nil
}

type ReturnClusterResponse struct {
}

func (m *ReturnClusterResponse) Reset()      { *m = ReturnClusterResponse{} }
func (*ReturnClusterResponse) ProtoMessage() {}
func (*ReturnClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6d23681472c66fc, []int{3}
}
func (m *ReturnClusterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReturnClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReturnClusterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReturnClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReturnClusterResponse.Merge(m, src)
}
func (m *ReturnClusterResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReturnClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReturnClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReturnClusterResponse proto.InternalMessageInfo

type GetClusterInfoRequest struct {
	ExperimentID *sharedpb.ExperimentRunID `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (m *GetClusterInfoRequest) Reset()      { *m = GetClusterInfoRequest{} }
func (*GetClusterInfoRequest) ProtoMessage() {}
func (*GetClusterInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6d23681472c66fc, []int{4}
}
func (m *GetClusterInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterInfoRequest.Merge(m, src)
}
func (m *GetClusterInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterInfoRequest proto.InternalMessageInfo

func (m *GetClusterInfoRequest) GetExperimentID() *sharedpb.ExperimentRunID {
	if m != nil {
		return m.ExperimentID
	}
	return nil
}

type ClusterInfo struct {
	Kubeconfig     []byte       `protobuf:"bytes,1,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	PixieClusterID *uuidpb.UUID `protobuf:"bytes,2,opt,name=pixie_cluster_id,json=pixieClusterId,proto3" json:"pixie_cluster_id,omitempty"`
}

func (m *ClusterInfo) Reset()      { *m = ClusterInfo{} }
func (*ClusterInfo) ProtoMessage() {}
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6d23681472c66fc, []int{5}
}
func (m *ClusterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfo.Merge(m, src)
}
func (m *ClusterInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfo proto.InternalMessageInfo

func (m *ClusterInfo) GetKubeconfig() []byte {
	if m != nil {
		return m.Kubeconfig
	}
	return nil
}

func (m *ClusterInfo) GetPixieClusterID() *uuidpb.UUID {
	if m != nil {
		return m.PixieClusterID
	}
	return nil
}

func init() {
	proto.RegisterType((*PrepareClusterRequest)(nil), "px.perf_tool.PrepareClusterRequest")
	proto.RegisterType((*PrepareClusterResponse)(nil), "px.perf_tool.PrepareClusterResponse")
	proto.RegisterType((*ReturnClusterRequest)(nil), "px.perf_tool.ReturnClusterRequest")
	proto.RegisterType((*ReturnClusterResponse)(nil), "px.perf_tool.ReturnClusterResponse")
	proto.RegisterType((*GetClusterInfoRequest)(nil), "px.perf_tool.GetClusterInfoRequest")
	proto.RegisterType((*ClusterInfo)(nil), "px.perf_tool.ClusterInfo")
}

func init() {
	proto.RegisterFile("src/e2e_test/perf_tool/backend/clustermgr/clustermgrpb/service.proto", fileDescriptor_c6d23681472c66fc)
}

var fileDescriptor_c6d23681472c66fc = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xbd, 0x8e, 0xd3, 0x4c,
	0x14, 0xf5, 0x6c, 0xf1, 0x15, 0x13, 0x6f, 0xbe, 0xd5, 0x88, 0x40, 0x88, 0xc4, 0x04, 0x79, 0x29,
	0x68, 0xb0, 0xa5, 0x40, 0x49, 0x15, 0x8c, 0x90, 0x8b, 0x95, 0x22, 0x2f, 0x2b, 0x21, 0x28, 0x2c,
	0xff, 0xdc, 0x78, 0x47, 0x9b, 0x78, 0x86, 0xf1, 0x18, 0xa5, 0xa0, 0xe0, 0x11, 0x78, 0x04, 0x4a,
	0x24, 0x5e, 0x84, 0x32, 0xe5, 0x56, 0x2b, 0xe2, 0x34, 0x94, 0xfb, 0x08, 0xc8, 0x3f, 0xd9, 0xd8,
	0x51, 0x58, 0x2a, 0xa8, 0x3c, 0x67, 0x74, 0xee, 0x3d, 0xe7, 0xfe, 0x8c, 0xb1, 0x9d, 0xca, 0xd0,
	0x82, 0x11, 0x78, 0x0a, 0x52, 0x65, 0x09, 0x90, 0x53, 0x4f, 0x71, 0x3e, 0xb3, 0x02, 0x3f, 0xbc,
	0x80, 0x24, 0xb2, 0xc2, 0x59, 0x96, 0x2a, 0x90, 0xf3, 0x58, 0x36, 0x8e, 0x22, 0xb0, 0x52, 0x90,
	0x1f, 0x58, 0x08, 0xa6, 0x90, 0x5c, 0x71, 0xa2, 0x8b, 0x85, 0x79, 0x13, 0x3b, 0x78, 0x12, 0x33,
	0x75, 0x9e, 0x05, 0x66, 0xc8, 0xe7, 0x56, 0xcc, 0x63, 0x6e, 0x95, 0xa4, 0x20, 0x9b, 0x96, 0xa8,
	0x04, 0xe5, 0xa9, 0x0a, 0x1e, 0x0c, 0x0b, 0x0b, 0xbe, 0x60, 0x15, 0xcd, 0xca, 0x32, 0x16, 0x89,
	0xa0, 0xfc, 0xd4, 0x84, 0x67, 0xbf, 0xf1, 0x08, 0x0b, 0x01, 0x92, 0xcd, 0x21, 0x51, 0x22, 0x68,
	0x80, 0x3f, 0x44, 0x6d, 0x2a, 0x4b, 0xcf, 0x7d, 0x09, 0x85, 0x52, 0x75, 0xa8, 0xa2, 0x8c, 0x6f,
	0x08, 0xf7, 0x26, 0x12, 0x84, 0x2f, 0xe1, 0x45, 0x55, 0xaf, 0x0b, 0xef, 0x33, 0x48, 0x15, 0x79,
	0x8d, 0x0f, 0xb7, 0x1a, 0x1e, 0x8b, 0xfa, 0xe8, 0x21, 0x7a, 0xdc, 0x19, 0x3d, 0x30, 0x9b, 0xb5,
	0x9b, 0x2f, 0x6f, 0x28, 0x6e, 0x96, 0x38, 0xf6, 0xf8, 0x28, 0xbf, 0x1a, 0xea, 0xdb, 0x4b, 0xc7,
	0x76, 0xf5, 0x6d, 0x16, 0x27, 0x22, 0xcf, 0xb1, 0x5e, 0xf7, 0xd5, 0x4b, 0x05, 0x84, 0xfd, 0x83,
	0x32, 0xe9, 0xfd, 0x76, 0xd2, 0xda, 0xc9, 0xa9, 0x80, 0xd0, 0xed, 0x84, 0x5b, 0x60, 0xf4, 0xf1,
	0xdd, 0x5d, 0xb3, 0xa9, 0xe0, 0x49, 0x0a, 0xc6, 0x0c, 0xdf, 0x71, 0x41, 0x65, 0x32, 0xf9, 0x17,
	0x55, 0x18, 0xf7, 0x70, 0x6f, 0x47, 0xad, 0xb6, 0x31, 0xc7, 0xbd, 0x57, 0xa0, 0xea, 0x5b, 0x27,
	0x99, 0xf2, 0xbf, 0xeb, 0xe3, 0x23, 0xee, 0x34, 0xb4, 0x08, 0xc5, 0xf8, 0x22, 0x0b, 0x20, 0xe4,
	0xc9, 0x94, 0xc5, 0xa5, 0x82, 0xee, 0x36, 0x6e, 0xc8, 0x09, 0x3e, 0x12, 0x6c, 0xc1, 0xc0, 0xdb,
	0x8c, 0x80, 0x45, 0xf5, 0x00, 0xfe, 0x2f, 0x7c, 0x54, 0x9b, 0x68, 0x9e, 0x9d, 0x39, 0xf6, 0x98,
	0xe4, 0x57, 0xc3, 0xee, 0xa4, 0x20, 0x6f, 0x04, 0x6c, 0xb7, 0x2b, 0x9a, 0x38, 0x1a, 0x7d, 0x39,
	0xc0, 0xbd, 0x1a, 0x9d, 0xf8, 0x89, 0x1f, 0x83, 0x3c, 0xad, 0x5e, 0x09, 0x79, 0x87, 0xbb, 0xed,
	0x39, 0x91, 0xe3, 0x76, 0xa1, 0x7b, 0x57, 0x6e, 0xf0, 0xe8, 0x76, 0x52, 0xd5, 0x63, 0xf2, 0x06,
	0x1f, 0xb6, 0x9a, 0x4f, 0x8c, 0x76, 0xd8, 0xbe, 0x3d, 0x18, 0x1c, 0xdf, 0xca, 0xa9, 0x33, 0x4f,
	0x70, 0xb7, 0x3d, 0xbd, 0x5d, 0xdb, 0x7b, 0x67, 0x3b, 0xd8, 0xbf, 0xbd, 0x05, 0x63, 0x3c, 0x5e,
	0xae, 0xa8, 0x76, 0xb9, 0xa2, 0xda, 0xf5, 0x8a, 0xa2, 0x4f, 0x39, 0x45, 0x5f, 0x73, 0x8a, 0xbe,
	0xe7, 0x14, 0x2d, 0x73, 0x8a, 0x7e, 0xe4, 0x14, 0xfd, 0xcc, 0xa9, 0x76, 0x9d, 0x53, 0xf4, 0x79,
	0x4d, 0xb5, 0xe5, 0x9a, 0x6a, 0x97, 0x6b, 0xaa, 0xbd, 0xd5, 0x9b, 0xbf, 0x9e, 0xe0, 0xbf, 0xf2,
	0xa5, 0x3e, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xde, 0x29, 0xf5, 0xbb, 0x04, 0x00, 0x00,
}

func (this *PrepareClusterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrepareClusterRequest)
	if !ok {
		that2, ok := that.(PrepareClusterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExperimentID.Equal(that1.ExperimentID) {
		return false
	}
	if !this.ClusterSpec.Equal(that1.ClusterSpec) {
		return false
	}
	return true
}
func (this *PrepareClusterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrepareClusterResponse)
	if !ok {
		that2, ok := that.(PrepareClusterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReturnClusterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReturnClusterRequest)
	if !ok {
		that2, ok := that.(ReturnClusterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExperimentID.Equal(that1.ExperimentID) {
		return false
	}
	return true
}
func (this *ReturnClusterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReturnClusterResponse)
	if !ok {
		that2, ok := that.(ReturnClusterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetClusterInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClusterInfoRequest)
	if !ok {
		that2, ok := that.(GetClusterInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExperimentID.Equal(that1.ExperimentID) {
		return false
	}
	return true
}
func (this *ClusterInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterInfo)
	if !ok {
		that2, ok := that.(ClusterInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Kubeconfig, that1.Kubeconfig) {
		return false
	}
	if !this.PixieClusterID.Equal(that1.PixieClusterID) {
		return false
	}
	return true
}
func (this *PrepareClusterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&clustermgrpb.PrepareClusterRequest{")
	if this.ExperimentID != nil {
		s = append(s, "ExperimentID: "+fmt.Sprintf("%#v", this.ExperimentID)+",\n")
	}
	if this.ClusterSpec != nil {
		s = append(s, "ClusterSpec: "+fmt.Sprintf("%#v", this.ClusterSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrepareClusterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&clustermgrpb.PrepareClusterResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReturnClusterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&clustermgrpb.ReturnClusterRequest{")
	if this.ExperimentID != nil {
		s = append(s, "ExperimentID: "+fmt.Sprintf("%#v", this.ExperimentID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReturnClusterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&clustermgrpb.ReturnClusterResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetClusterInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&clustermgrpb.GetClusterInfoRequest{")
	if this.ExperimentID != nil {
		s = append(s, "ExperimentID: "+fmt.Sprintf("%#v", this.ExperimentID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClusterInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&clustermgrpb.ClusterInfo{")
	s = append(s, "Kubeconfig: "+fmt.Sprintf("%#v", this.Kubeconfig)+",\n")
	if this.PixieClusterID != nil {
		s = append(s, "PixieClusterID: "+fmt.Sprintf("%#v", this.PixieClusterID)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterManagerServiceClient is the client API for ClusterManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterManagerServiceClient interface {
	PrepareCluster(ctx context.Context, in *PrepareClusterRequest, opts ...grpc.CallOption) (*PrepareClusterResponse, error)
	ReturnCluster(ctx context.Context, in *ReturnClusterRequest, opts ...grpc.CallOption) (*ReturnClusterResponse, error)
	GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*ClusterInfo, error)
}

type clusterManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterManagerServiceClient(cc *grpc.ClientConn) ClusterManagerServiceClient {
	return &clusterManagerServiceClient{cc}
}

func (c *clusterManagerServiceClient) PrepareCluster(ctx context.Context, in *PrepareClusterRequest, opts ...grpc.CallOption) (*PrepareClusterResponse, error) {
	out := new(PrepareClusterResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.ClusterManagerService/PrepareCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerServiceClient) ReturnCluster(ctx context.Context, in *ReturnClusterRequest, opts ...grpc.CallOption) (*ReturnClusterResponse, error) {
	out := new(ReturnClusterResponse)
	err := c.cc.Invoke(ctx, "/px.perf_tool.ClusterManagerService/ReturnCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagerServiceClient) GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*ClusterInfo, error) {
	out := new(ClusterInfo)
	err := c.cc.Invoke(ctx, "/px.perf_tool.ClusterManagerService/GetClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagerServiceServer is the server API for ClusterManagerService service.
type ClusterManagerServiceServer interface {
	PrepareCluster(context.Context, *PrepareClusterRequest) (*PrepareClusterResponse, error)
	ReturnCluster(context.Context, *ReturnClusterRequest) (*ReturnClusterResponse, error)
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*ClusterInfo, error)
}

// UnimplementedClusterManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClusterManagerServiceServer struct {
}

func (*UnimplementedClusterManagerServiceServer) PrepareCluster(ctx context.Context, req *PrepareClusterRequest) (*PrepareClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareCluster not implemented")
}
func (*UnimplementedClusterManagerServiceServer) ReturnCluster(ctx context.Context, req *ReturnClusterRequest) (*ReturnClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnCluster not implemented")
}
func (*UnimplementedClusterManagerServiceServer) GetClusterInfo(ctx context.Context, req *GetClusterInfoRequest) (*ClusterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}

func RegisterClusterManagerServiceServer(s *grpc.Server, srv ClusterManagerServiceServer) {
	s.RegisterService(&_ClusterManagerService_serviceDesc, srv)
}

func _ClusterManagerService_PrepareCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServiceServer).PrepareCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.ClusterManagerService/PrepareCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServiceServer).PrepareCluster(ctx, req.(*PrepareClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagerService_ReturnCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServiceServer).ReturnCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.ClusterManagerService/ReturnCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServiceServer).ReturnCluster(ctx, req.(*ReturnClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagerService_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServiceServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/px.perf_tool.ClusterManagerService/GetClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServiceServer).GetClusterInfo(ctx, req.(*GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "px.perf_tool.ClusterManagerService",
	HandlerType: (*ClusterManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareCluster",
			Handler:    _ClusterManagerService_PrepareCluster_Handler,
		},
		{
			MethodName: "ReturnCluster",
			Handler:    _ClusterManagerService_ReturnCluster_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _ClusterManagerService_GetClusterInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/e2e_test/perf_tool/backend/clustermgr/clustermgrpb/service.proto",
}

func (m *PrepareClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterSpec != nil {
		{
			size, err := m.ClusterSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ExperimentID != nil {
		{
			size, err := m.ExperimentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrepareClusterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareClusterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrepareClusterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReturnClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReturnClusterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExperimentID != nil {
		{
			size, err := m.ExperimentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReturnClusterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnClusterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReturnClusterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetClusterInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClusterInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExperimentID != nil {
		{
			size, err := m.ExperimentID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PixieClusterID != nil {
		{
			size, err := m.PixieClusterID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kubeconfig) > 0 {
		i -= len(m.Kubeconfig)
		copy(dAtA[i:], m.Kubeconfig)
		i = encodeVarintService(dAtA, i, uint64(len(m.Kubeconfig)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrepareClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExperimentID != nil {
		l = m.ExperimentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.ClusterSpec != nil {
		l = m.ClusterSpec.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *PrepareClusterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReturnClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExperimentID != nil {
		l = m.ExperimentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ReturnClusterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetClusterInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExperimentID != nil {
		l = m.ExperimentID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ClusterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kubeconfig)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.PixieClusterID != nil {
		l = m.PixieClusterID.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PrepareClusterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrepareClusterRequest{`,
		`ExperimentID:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentID), "ExperimentRunID", "sharedpb.ExperimentRunID", 1) + `,`,
		`ClusterSpec:` + strings.Replace(fmt.Sprintf("%v", this.ClusterSpec), "ClusterSpec", "experimentpb.ClusterSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrepareClusterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrepareClusterResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ReturnClusterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReturnClusterRequest{`,
		`ExperimentID:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentID), "ExperimentRunID", "sharedpb.ExperimentRunID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReturnClusterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReturnClusterResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetClusterInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClusterInfoRequest{`,
		`ExperimentID:` + strings.Replace(fmt.Sprintf("%v", this.ExperimentID), "ExperimentRunID", "sharedpb.ExperimentRunID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterInfo{`,
		`Kubeconfig:` + fmt.Sprintf("%v", this.Kubeconfig) + `,`,
		`PixieClusterID:` + strings.Replace(fmt.Sprintf("%v", this.PixieClusterID), "UUID", "uuidpb.UUID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PrepareClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentID == nil {
				m.ExperimentID = &sharedpb.ExperimentRunID{}
			}
			if err := m.ExperimentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterSpec == nil {
				m.ClusterSpec = &experimentpb.ClusterSpec{}
			}
			if err := m.ClusterSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareClusterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareClusterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareClusterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentID == nil {
				m.ExperimentID = &sharedpb.ExperimentRunID{}
			}
			if err := m.ExperimentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnClusterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnClusterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnClusterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExperimentID == nil {
				m.ExperimentID = &sharedpb.ExperimentRunID{}
			}
			if err := m.ExperimentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubeconfig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kubeconfig = append(m.Kubeconfig[:0], dAtA[iNdEx:postIndex]...)
			if m.Kubeconfig == nil {
				m.Kubeconfig = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PixieClusterID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PixieClusterID == nil {
				m.PixieClusterID = &uuidpb.UUID{}
			}
			if err := m.PixieClusterID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
